{
	"id": "c29a2cf5cc8e14ecf35ac6835c10c0ae",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.6.12",
	"solcLongVersion": "0.6.12+commit.27d51765",
	"input": {
		"language": "Solidity",
		"sources": {
			"libs/ERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n// Adapted copy from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/files\n\nimport \"./ERC20.sol\";\nimport \"./ECDSA.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to use their tokens\n * without sending any transactions by setting {IERC20-allowance} with a\n * signature using the {permit} method, and then spend them via\n * {IERC20-transferFrom}.\n *\n * The {permit} signature mechanism conforms to the {IERC2612Permit} interface.\n */\nabstract contract ERC20Permit is ERC20 {\n  mapping(address => uint256) private _nonces;\n\n  bytes32 private constant _PERMIT_TYPEHASH = keccak256(\n    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n  );\n\n  // Mapping of ChainID to domain separators. This is a very gas efficient way\n  // to not recalculate the domain separator on every call, while still\n  // automatically detecting ChainID changes.\n  mapping(uint256 => bytes32) private _domainSeparators;\n\n  constructor() internal {\n    _updateDomainSeparator();\n  }\n\n  /**\n   * @dev See {IERC2612Permit-permit}.\n   *\n   * If https://eips.ethereum.org/EIPS/eip-1344[ChainID] ever changes, the\n   * EIP712 Domain Separator is automatically recalculated.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 amount,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) public {\n    require(blockTimestamp() <= deadline, \"ERC20Permit: expired deadline\");\n\n    bytes32 hashStruct = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, amount, _nonces[owner], deadline));\n\n    bytes32 hash = keccak256(abi.encodePacked(uint16(0x1901), _domainSeparator(), hashStruct));\n\n    address signer = ECDSA.recover(hash, v, r, s);\n    require(signer == owner, \"ERC20Permit: invalid signature\");\n\n    _nonces[owner]++;\n    _approve(owner, spender, amount);\n  }\n\n  /**\n   * @dev See {IERC2612Permit-nonces}.\n   */\n  function nonces(address owner) public view returns (uint256) {\n    return _nonces[owner];\n  }\n\n  function _updateDomainSeparator() private returns (bytes32) {\n    uint256 _chainID = chainID();\n\n    bytes32 newDomainSeparator = keccak256(\n      abi.encode(\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n        keccak256(bytes(name())),\n        keccak256(bytes(\"1\")), // Version\n        _chainID,\n        address(this)\n      )\n    );\n\n    _domainSeparators[_chainID] = newDomainSeparator;\n\n    return newDomainSeparator;\n  }\n\n  // Returns the domain separator, updating it if chainID changes\n  function _domainSeparator() private returns (bytes32) {\n    bytes32 domainSeparator = _domainSeparators[chainID()];\n    if (domainSeparator != 0x00) {\n      return domainSeparator;\n    } else {\n      return _updateDomainSeparator();\n    }\n  }\n\n  function chainID() public view virtual returns (uint256 _chainID) {\n    assembly {\n      _chainID := chainid()\n    }\n  }\n\n  function blockTimestamp() public view virtual returns (uint256) {\n    return block.timestamp;\n  }\n}"
			},
			"libs/ECDSA.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n// A copy from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/files\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n  /**\n   * @dev Returns the address that signed a hashed message (`hash`) with\n   * `signature`. This address can then be used for verification purposes.\n   *\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n   * this function rejects them by requiring the `s` value to be in the lower\n   * half order, and the `v` value to be either 27 or 28.\n   *\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n   * verification to be secure: it is possible to craft signatures that\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n   * this is by receiving a hash of the original message (which may otherwise\n   * be too long), and then calling {toEthSignedMessageHash} on it.\n   */\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n    // Check the signature length\n    if (signature.length != 65) {\n      revert(\"ECDSA: invalid signature length\");\n    }\n\n    // Divide the signature in r, s and v variables\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n\n    // ecrecover takes the signature parameters, and the only way to get them\n    // currently is to use assembly.\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      r := mload(add(signature, 0x20))\n      s := mload(add(signature, 0x40))\n      v := mload(add(signature, 0x41))\n    }\n\n    return recover(hash, v, r, s);\n  }\n\n  /**\n   * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\n   * `r` and `s` signature fields separately.\n   */\n  function recover(\n    bytes32 hash,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) internal pure returns (address) {\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n    // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n    //\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n    // these malleable signatures as well.\n    require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\n    require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n    // If the signature is valid (and not malleable), return the signer address\n    address signer = ecrecover(hash, v, r, s);\n    require(signer != address(0), \"ECDSA: invalid signature\");\n\n    return signer;\n  }\n\n  /**\n   * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n   * replicates the behavior of the\n   * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n   * JSON-RPC method.\n   *\n   * See {recover}.\n   */\n  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n    // 32 is the length in bytes of hash,\n    // enforced by the type signature above\n    return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n  }\n}"
			},
			"libs/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./Context.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"./SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}"
			},
			"libs/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}"
			},
			"interfaces/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
			},
			"libs/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"interfaces/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC20.sol\":{\"keccak256\":\"0x8435e8230e900d716b4261cebc91985b70e406e6fd433e9751b46a2f0553401a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0a82e9a70916b84548d3dcad593027da45cbcda310e5b07d3aa56cfa4f97628c\",\"dweb:/ipfs/Qmatc1Bx5fqGNoa9tnDFedThGaLQm69pB8Z7B85uxpacJv\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"libs/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"libs/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"libs/Context.sol\":{\"keccak256\":\"0xd3e88da8695a1d63936f7bbf3b3441056c44d167e679a80f9a1b5ffafb11fad9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://587786c556944a0a561b5f5ab16716263b42ca8dd6cc1102b75f4c4d1a802325\",\"dweb:/ipfs/QmU9Y13bBrVy2uE4TiHfPSTFQXV2BeUnxrMo135zRy7wJT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"libs/ECDSA.sol": {
				"ECDSA": {
					"abi": [],
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"libs/ECDSA.sol\":351:3783  library ECDSA {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"libs/ECDSA.sol\":351:3783  library ECDSA {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220ee5e0365c842bbd65dc398b52f6c4f291823abe01020707431b5cad14429a03364736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ee5e0365c842bbd65dc398b52f6c4f291823abe01020707431b5cad14429a03364736f6c634300060c0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEE 0x5E SUB PUSH6 0xC842BBD65DC3 SWAP9 0xB5 0x2F PUSH13 0x4F291823ABE01020707431B5CA 0xD1 DIFFICULTY 0x29 LOG0 CALLER PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "351:3432:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ee5e0365c842bbd65dc398b52f6c4f291823abe01020707431b5cad14429a03364736f6c634300060c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEE 0x5E SUB PUSH6 0xC842BBD65DC3 SWAP9 0xB5 0x2F PUSH13 0x4F291823ABE01020707431B5CA 0xD1 DIFFICULTY 0x29 LOG0 CALLER PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "351:3432:2:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite",
								"toEthSignedMessageHash(bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 351,
									"end": 3783,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "PUSH",
									"source": 2,
									"value": "B"
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "BYTE",
									"source": 2
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "INVALID",
									"source": 2
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "ADDRESS",
									"source": 2
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "MSTORE8",
									"source": 2
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 351,
									"end": 3783,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ee5e0365c842bbd65dc398b52f6c4f291823abe01020707431b5cad14429a03364736f6c634300060c0033",
									".code": [
										{
											"begin": 351,
											"end": 3783,
											"name": "PUSHDEPLOYADDRESS",
											"source": 2
										},
										{
											"begin": 351,
											"end": 3783,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 351,
											"end": 3783,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 351,
											"end": 3783,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 351,
											"end": 3783,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 351,
											"end": 3783,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 351,
											"end": 3783,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 351,
											"end": 3783,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 351,
											"end": 3783,
											"name": "REVERT",
											"source": 2
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"libs/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"libs/ECDSA.sol\":{\"keccak256\":\"0x56570b2c4f59242bc83fab31748218d6175a9cc0f9ac91f09f8a73980a44f110\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99419da14149b00e1cfe96aa2216b1c9b0d272841a31615dff4ed0af164bbfc9\",\"dweb:/ipfs/QmZaf31UHP8QYDHkuTgfD4kbHFtweCp657x7fBBV8Ye2aA\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"libs/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}, initializes {decimals} with a default value of 18. To select a different value for {decimals}, use {_setupDecimals}. All three of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"libs/ERC20.sol\":1314:10788  contract ERC20 is Context, IERC20 {... */\n  mstore(0x40, 0x80)\n    /* \"libs/ERC20.sol\":1951:2096  constructor (string memory name_, string memory symbol_) public {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  0x40\n  dup2\n  lt\n  iszero\n  tag_2\n  jumpi\n  0x00\n  dup1\n  revert\ntag_2:\n  dup2\n  add\n  swap1\n  dup1\n  dup1\n  mload\n  mload(0x40)\n  swap4\n  swap3\n  swap2\n  swap1\n  dup5\n  0x0100000000\n  dup3\n  gt\n  iszero\n  tag_3\n  jumpi\n  0x00\n  dup1\n  revert\ntag_3:\n  dup4\n  dup3\n  add\n  swap2\n  pop\n  0x20\n  dup3\n  add\n  dup6\n  dup2\n  gt\n  iszero\n  tag_4\n  jumpi\n  0x00\n  dup1\n  revert\ntag_4:\n  dup3\n  mload\n  dup7\n  0x01\n  dup3\n  mul\n  dup4\n  add\n  gt\n  0x0100000000\n  dup3\n  gt\n  or\n  iszero\n  tag_5\n  jumpi\n  0x00\n  dup1\n  revert\ntag_5:\n  dup1\n  dup4\n  mstore\n  0x20\n  dup4\n  add\n  swap3\n  pop\n  pop\n  pop\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  dup1\n  dup4\n  dup4\n  0x00\ntag_6:\n  dup4\n  dup2\n  lt\n  iszero\n  tag_8\n  jumpi\n  dup1\n  dup3\n  add\n  mload\n  dup2\n  dup5\n  add\n  mstore\n  0x20\n  dup2\n  add\n  swap1\n  pop\n  jump(tag_6)\ntag_8:\n  pop\n  pop\n  pop\n  pop\n  swap1\n  pop\n  swap1\n  dup2\n  add\n  swap1\n  0x1f\n  and\n  dup1\n  iszero\n  tag_9\n  jumpi\n  dup1\n  dup3\n  sub\n  dup1\n  mload\n  0x01\n  dup4\n  0x20\n  sub\n  0x0100\n  exp\n  sub\n  not\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap2\n  pop\ntag_9:\n  pop\n  0x40\n  mstore\n  0x20\n  add\n  dup1\n  mload\n  mload(0x40)\n  swap4\n  swap3\n  swap2\n  swap1\n  dup5\n  0x0100000000\n  dup3\n  gt\n  iszero\n  tag_10\n  jumpi\n  0x00\n  dup1\n  revert\ntag_10:\n  dup4\n  dup3\n  add\n  swap2\n  pop\n  0x20\n  dup3\n  add\n  dup6\n  dup2\n  gt\n  iszero\n  tag_11\n  jumpi\n  0x00\n  dup1\n  revert\ntag_11:\n  dup3\n  mload\n  dup7\n  0x01\n  dup3\n  mul\n  dup4\n  add\n  gt\n  0x0100000000\n  dup3\n  gt\n  or\n  iszero\n  tag_12\n  jumpi\n  0x00\n  dup1\n  revert\ntag_12:\n  dup1\n  dup4\n  mstore\n  0x20\n  dup4\n  add\n  swap3\n  pop\n  pop\n  pop\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  dup1\n  dup4\n  dup4\n  0x00\ntag_13:\n  dup4\n  dup2\n  lt\n  iszero\n  tag_15\n  jumpi\n  dup1\n  dup3\n  add\n  mload\n  dup2\n  dup5\n  add\n  mstore\n  0x20\n  dup2\n  add\n  swap1\n  pop\n  jump(tag_13)\ntag_15:\n  pop\n  pop\n  pop\n  pop\n  swap1\n  pop\n  swap1\n  dup2\n  add\n  swap1\n  0x1f\n  and\n  dup1\n  iszero\n  tag_16\n  jumpi\n  dup1\n  dup3\n  sub\n  dup1\n  mload\n  0x01\n  dup4\n  0x20\n  sub\n  0x0100\n  exp\n  sub\n  not\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap2\n  pop\ntag_16:\n  pop\n  0x40\n  mstore\n  pop\n  pop\n  pop\n    /* \"libs/ERC20.sol\":2033:2038  name_ */\n  dup2\n    /* \"libs/ERC20.sol\":2025:2030  _name */\n  0x03\n    /* \"libs/ERC20.sol\":2025:2038  _name = name_ */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_19\n  swap3\n  swap2\n  swap1\n  tag_20\n  jump\t// in\ntag_19:\n  pop\n    /* \"libs/ERC20.sol\":2058:2065  symbol_ */\n  dup1\n    /* \"libs/ERC20.sol\":2048:2055  _symbol */\n  0x04\n    /* \"libs/ERC20.sol\":2048:2065  _symbol = symbol_ */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_21\n  swap3\n  swap2\n  swap1\n  tag_20\n  jump\t// in\ntag_21:\n  pop\n    /* \"libs/ERC20.sol\":2087:2089  18 */\n  0x12\n    /* \"libs/ERC20.sol\":2075:2084  _decimals */\n  0x05\n  0x00\n    /* \"libs/ERC20.sol\":2075:2089  _decimals = 18 */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"libs/ERC20.sol\":1951:2096  constructor (string memory name_, string memory symbol_) public {... */\n  pop\n  pop\n    /* \"libs/ERC20.sol\":1314:10788  contract ERC20 is Context, IERC20 {... */\n  jump(tag_22)\ntag_20:\n  dup3\n  dup1\n  sload\n  0x01\n  dup2\n  0x01\n  and\n  iszero\n  0x0100\n  mul\n  sub\n  and\n  0x02\n  swap1\n  div\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  0x1f\n  lt\n  tag_24\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_23)\ntag_24:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_23\n  jumpi\n  swap2\n  dup3\n  add\ntag_25:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_26\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_25)\ntag_26:\ntag_23:\n  pop\n  swap1\n  pop\n  tag_27\n  swap2\n  swap1\n  tag_28\n  jump\t// in\ntag_27:\n  pop\n  swap1\n  jump\t// out\ntag_28:\ntag_29:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_30\n  jumpi\n  0x00\n  dup2\n  0x00\n  swap1\n  sstore\n  pop\n  0x01\n  add\n  jump(tag_29)\ntag_30:\n  pop\n  swap1\n  jump\t// out\ntag_22:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"libs/ERC20.sol\":1314:10788  contract ERC20 is Context, IERC20 {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"libs/ERC20.sol\":2161:2250  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_17:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_19\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_17)\n    tag_19:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_20\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_20:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"libs/ERC20.sol\":4237:4403  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_21\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_22\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_22:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_23\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"libs/ERC20.sol\":3228:3334  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n      tag_24\n      tag_25\n      jump\t// in\n    tag_24:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"libs/ERC20.sol\":4870:5187  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_6:\n      tag_26\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x60\n      dup2\n      lt\n      iszero\n      tag_27\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_28\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"libs/ERC20.sol\":3079:3168  function decimals() public view virtual returns (uint8) {... */\n    tag_7:\n      tag_29\n      tag_30\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      dup1\n      dup3\n      0xff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"libs/ERC20.sol\":5582:5797  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_31\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_32\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_32:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_33\n      jump\t// in\n    tag_31:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"libs/ERC20.sol\":3392:3517  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_34\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_35\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_35:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_36\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"libs/ERC20.sol\":2363:2456  function symbol() public view virtual returns (string memory) {... */\n    tag_10:\n      tag_37\n      tag_38\n      jump\t// in\n    tag_37:\n      mload(0x40)\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_39:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_41\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_39)\n    tag_41:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_42\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_42:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"libs/ERC20.sol\":6284:6550  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_43\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_44\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_44:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_45\n      jump\t// in\n    tag_43:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"libs/ERC20.sol\":3720:3892  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_46\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_47\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_47:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_48\n      jump\t// in\n    tag_46:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"libs/ERC20.sol\":3950:4099  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_49\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_50\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_50:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_51\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"libs/ERC20.sol\":2161:2250  function name() public view virtual returns (string memory) {... */\n    tag_16:\n        /* \"libs/ERC20.sol\":2206:2219  string memory */\n      0x60\n        /* \"libs/ERC20.sol\":2238:2243  _name */\n      0x03\n        /* \"libs/ERC20.sol\":2231:2243  return _name */\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      iszero\n      tag_53\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_54\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_53)\n    tag_54:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_55:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_55\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_53:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"libs/ERC20.sol\":2161:2250  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"libs/ERC20.sol\":4237:4403  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_23:\n        /* \"libs/ERC20.sol\":4320:4324  bool */\n      0x00\n        /* \"libs/ERC20.sol\":4336:4375  _approve(_msgSender(), spender, amount) */\n      tag_57\n        /* \"libs/ERC20.sol\":4345:4357  _msgSender() */\n      tag_58\n        /* \"libs/ERC20.sol\":4345:4355  _msgSender */\n      tag_59\n        /* \"libs/ERC20.sol\":4345:4357  _msgSender() */\n      jump\t// in\n    tag_58:\n        /* \"libs/ERC20.sol\":4359:4366  spender */\n      dup5\n        /* \"libs/ERC20.sol\":4368:4374  amount */\n      dup5\n        /* \"libs/ERC20.sol\":4336:4344  _approve */\n      tag_60\n        /* \"libs/ERC20.sol\":4336:4375  _approve(_msgSender(), spender, amount) */\n      jump\t// in\n    tag_57:\n        /* \"libs/ERC20.sol\":4392:4396  true */\n      0x01\n        /* \"libs/ERC20.sol\":4385:4396  return true */\n      swap1\n      pop\n        /* \"libs/ERC20.sol\":4237:4403  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"libs/ERC20.sol\":3228:3334  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_25:\n        /* \"libs/ERC20.sol\":3289:3296  uint256 */\n      0x00\n        /* \"libs/ERC20.sol\":3315:3327  _totalSupply */\n      sload(0x02)\n        /* \"libs/ERC20.sol\":3308:3327  return _totalSupply */\n      swap1\n      pop\n        /* \"libs/ERC20.sol\":3228:3334  function totalSupply() public view virtual override returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"libs/ERC20.sol\":4870:5187  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_28:\n        /* \"libs/ERC20.sol\":4976:4980  bool */\n      0x00\n        /* \"libs/ERC20.sol\":4992:5028  _transfer(sender, recipient, amount) */\n      tag_63\n        /* \"libs/ERC20.sol\":5002:5008  sender */\n      dup5\n        /* \"libs/ERC20.sol\":5010:5019  recipient */\n      dup5\n        /* \"libs/ERC20.sol\":5021:5027  amount */\n      dup5\n        /* \"libs/ERC20.sol\":4992:5001  _transfer */\n      tag_64\n        /* \"libs/ERC20.sol\":4992:5028  _transfer(sender, recipient, amount) */\n      jump\t// in\n    tag_63:\n        /* \"libs/ERC20.sol\":5038:5159  _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")) */\n      tag_65\n        /* \"libs/ERC20.sol\":5047:5053  sender */\n      dup5\n        /* \"libs/ERC20.sol\":5055:5067  _msgSender() */\n      tag_66\n        /* \"libs/ERC20.sol\":5055:5065  _msgSender */\n      tag_59\n        /* \"libs/ERC20.sol\":5055:5067  _msgSender() */\n      jump\t// in\n    tag_66:\n        /* \"libs/ERC20.sol\":5069:5158  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      tag_67\n        /* \"libs/ERC20.sol\":5107:5113  amount */\n      dup6\n        /* \"libs/ERC20.sol\":5069:5158  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x28\n      dup2\n      mstore\n      0x20\n      add\n      data_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330\n      0x28\n      swap2\n      codecopy\n        /* \"libs/ERC20.sol\":5069:5080  _allowances */\n      0x01\n        /* \"libs/ERC20.sol\":5069:5088  _allowances[sender] */\n      0x00\n        /* \"libs/ERC20.sol\":5081:5087  sender */\n      dup12\n        /* \"libs/ERC20.sol\":5069:5088  _allowances[sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"libs/ERC20.sol\":5069:5102  _allowances[sender][_msgSender()] */\n      0x00\n        /* \"libs/ERC20.sol\":5089:5101  _msgSender() */\n      tag_68\n        /* \"libs/ERC20.sol\":5089:5099  _msgSender */\n      tag_59\n        /* \"libs/ERC20.sol\":5089:5101  _msgSender() */\n      jump\t// in\n    tag_68:\n        /* \"libs/ERC20.sol\":5069:5102  _allowances[sender][_msgSender()] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"libs/ERC20.sol\":5069:5106  _allowances[sender][_msgSender()].sub */\n      tag_69\n      swap1\n        /* \"libs/ERC20.sol\":5069:5158  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_67:\n        /* \"libs/ERC20.sol\":5038:5046  _approve */\n      tag_60\n        /* \"libs/ERC20.sol\":5038:5159  _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")) */\n      jump\t// in\n    tag_65:\n        /* \"libs/ERC20.sol\":5176:5180  true */\n      0x01\n        /* \"libs/ERC20.sol\":5169:5180  return true */\n      swap1\n      pop\n        /* \"libs/ERC20.sol\":4870:5187  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"libs/ERC20.sol\":3079:3168  function decimals() public view virtual returns (uint8) {... */\n    tag_30:\n        /* \"libs/ERC20.sol\":3128:3133  uint8 */\n      0x00\n        /* \"libs/ERC20.sol\":3152:3161  _decimals */\n      0x05\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"libs/ERC20.sol\":3145:3161  return _decimals */\n      swap1\n      pop\n        /* \"libs/ERC20.sol\":3079:3168  function decimals() public view virtual returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"libs/ERC20.sol\":5582:5797  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_33:\n        /* \"libs/ERC20.sol\":5670:5674  bool */\n      0x00\n        /* \"libs/ERC20.sol\":5686:5769  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)) */\n      tag_72\n        /* \"libs/ERC20.sol\":5695:5707  _msgSender() */\n      tag_73\n        /* \"libs/ERC20.sol\":5695:5705  _msgSender */\n      tag_59\n        /* \"libs/ERC20.sol\":5695:5707  _msgSender() */\n      jump\t// in\n    tag_73:\n        /* \"libs/ERC20.sol\":5709:5716  spender */\n      dup5\n        /* \"libs/ERC20.sol\":5718:5768  _allowances[_msgSender()][spender].add(addedValue) */\n      tag_74\n        /* \"libs/ERC20.sol\":5757:5767  addedValue */\n      dup6\n        /* \"libs/ERC20.sol\":5718:5729  _allowances */\n      0x01\n        /* \"libs/ERC20.sol\":5718:5743  _allowances[_msgSender()] */\n      0x00\n        /* \"libs/ERC20.sol\":5730:5742  _msgSender() */\n      tag_75\n        /* \"libs/ERC20.sol\":5730:5740  _msgSender */\n      tag_59\n        /* \"libs/ERC20.sol\":5730:5742  _msgSender() */\n      jump\t// in\n    tag_75:\n        /* \"libs/ERC20.sol\":5718:5743  _allowances[_msgSender()] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"libs/ERC20.sol\":5718:5752  _allowances[_msgSender()][spender] */\n      0x00\n        /* \"libs/ERC20.sol\":5744:5751  spender */\n      dup10\n        /* \"libs/ERC20.sol\":5718:5752  _allowances[_msgSender()][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"libs/ERC20.sol\":5718:5756  _allowances[_msgSender()][spender].add */\n      tag_76\n      swap1\n        /* \"libs/ERC20.sol\":5718:5768  _allowances[_msgSender()][spender].add(addedValue) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_74:\n        /* \"libs/ERC20.sol\":5686:5694  _approve */\n      tag_60\n        /* \"libs/ERC20.sol\":5686:5769  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)) */\n      jump\t// in\n    tag_72:\n        /* \"libs/ERC20.sol\":5786:5790  true */\n      0x01\n        /* \"libs/ERC20.sol\":5779:5790  return true */\n      swap1\n      pop\n        /* \"libs/ERC20.sol\":5582:5797  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"libs/ERC20.sol\":3392:3517  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_36:\n        /* \"libs/ERC20.sol\":3466:3473  uint256 */\n      0x00\n        /* \"libs/ERC20.sol\":3492:3501  _balances */\n      dup1\n        /* \"libs/ERC20.sol\":3492:3510  _balances[account] */\n      0x00\n        /* \"libs/ERC20.sol\":3502:3509  account */\n      dup4\n        /* \"libs/ERC20.sol\":3492:3510  _balances[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"libs/ERC20.sol\":3485:3510  return _balances[account] */\n      swap1\n      pop\n        /* \"libs/ERC20.sol\":3392:3517  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"libs/ERC20.sol\":2363:2456  function symbol() public view virtual returns (string memory) {... */\n    tag_38:\n        /* \"libs/ERC20.sol\":2410:2423  string memory */\n      0x60\n        /* \"libs/ERC20.sol\":2442:2449  _symbol */\n      0x04\n        /* \"libs/ERC20.sol\":2435:2449  return _symbol */\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      0x01\n      dup2\n      0x01\n      and\n      iszero\n      0x0100\n      mul\n      sub\n      and\n      0x02\n      swap1\n      div\n      dup1\n      iszero\n      tag_79\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_80\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_79)\n    tag_80:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_81:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_81\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_79:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"libs/ERC20.sol\":2363:2456  function symbol() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"libs/ERC20.sol\":6284:6550  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_45:\n        /* \"libs/ERC20.sol\":6377:6381  bool */\n      0x00\n        /* \"libs/ERC20.sol\":6393:6522  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")) */\n      tag_83\n        /* \"libs/ERC20.sol\":6402:6414  _msgSender() */\n      tag_84\n        /* \"libs/ERC20.sol\":6402:6412  _msgSender */\n      tag_59\n        /* \"libs/ERC20.sol\":6402:6414  _msgSender() */\n      jump\t// in\n    tag_84:\n        /* \"libs/ERC20.sol\":6416:6423  spender */\n      dup5\n        /* \"libs/ERC20.sol\":6425:6521  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_85\n        /* \"libs/ERC20.sol\":6464:6479  subtractedValue */\n      dup6\n        /* \"libs/ERC20.sol\":6425:6521  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x25\n      dup2\n      mstore\n      0x20\n      add\n      data_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8\n      0x25\n      swap2\n      codecopy\n        /* \"libs/ERC20.sol\":6425:6436  _allowances */\n      0x01\n        /* \"libs/ERC20.sol\":6425:6450  _allowances[_msgSender()] */\n      0x00\n        /* \"libs/ERC20.sol\":6437:6449  _msgSender() */\n      tag_86\n        /* \"libs/ERC20.sol\":6437:6447  _msgSender */\n      tag_59\n        /* \"libs/ERC20.sol\":6437:6449  _msgSender() */\n      jump\t// in\n    tag_86:\n        /* \"libs/ERC20.sol\":6425:6450  _allowances[_msgSender()] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"libs/ERC20.sol\":6425:6459  _allowances[_msgSender()][spender] */\n      0x00\n        /* \"libs/ERC20.sol\":6451:6458  spender */\n      dup11\n        /* \"libs/ERC20.sol\":6425:6459  _allowances[_msgSender()][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"libs/ERC20.sol\":6425:6463  _allowances[_msgSender()][spender].sub */\n      tag_69\n      swap1\n        /* \"libs/ERC20.sol\":6425:6521  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_85:\n        /* \"libs/ERC20.sol\":6393:6401  _approve */\n      tag_60\n        /* \"libs/ERC20.sol\":6393:6522  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")) */\n      jump\t// in\n    tag_83:\n        /* \"libs/ERC20.sol\":6539:6543  true */\n      0x01\n        /* \"libs/ERC20.sol\":6532:6543  return true */\n      swap1\n      pop\n        /* \"libs/ERC20.sol\":6284:6550  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"libs/ERC20.sol\":3720:3892  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n    tag_48:\n        /* \"libs/ERC20.sol\":3806:3810  bool */\n      0x00\n        /* \"libs/ERC20.sol\":3822:3864  _transfer(_msgSender(), recipient, amount) */\n      tag_88\n        /* \"libs/ERC20.sol\":3832:3844  _msgSender() */\n      tag_89\n        /* \"libs/ERC20.sol\":3832:3842  _msgSender */\n      tag_59\n        /* \"libs/ERC20.sol\":3832:3844  _msgSender() */\n      jump\t// in\n    tag_89:\n        /* \"libs/ERC20.sol\":3846:3855  recipient */\n      dup5\n        /* \"libs/ERC20.sol\":3857:3863  amount */\n      dup5\n        /* \"libs/ERC20.sol\":3822:3831  _transfer */\n      tag_64\n        /* \"libs/ERC20.sol\":3822:3864  _transfer(_msgSender(), recipient, amount) */\n      jump\t// in\n    tag_88:\n        /* \"libs/ERC20.sol\":3881:3885  true */\n      0x01\n        /* \"libs/ERC20.sol\":3874:3885  return true */\n      swap1\n      pop\n        /* \"libs/ERC20.sol\":3720:3892  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"libs/ERC20.sol\":3950:4099  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_51:\n        /* \"libs/ERC20.sol\":4039:4046  uint256 */\n      0x00\n        /* \"libs/ERC20.sol\":4065:4076  _allowances */\n      0x01\n        /* \"libs/ERC20.sol\":4065:4083  _allowances[owner] */\n      0x00\n        /* \"libs/ERC20.sol\":4077:4082  owner */\n      dup5\n        /* \"libs/ERC20.sol\":4065:4083  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"libs/ERC20.sol\":4065:4092  _allowances[owner][spender] */\n      0x00\n        /* \"libs/ERC20.sol\":4084:4091  spender */\n      dup4\n        /* \"libs/ERC20.sol\":4065:4092  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"libs/ERC20.sol\":4058:4092  return _allowances[owner][spender] */\n      swap1\n      pop\n        /* \"libs/ERC20.sol\":3950:4099  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"libs/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n    tag_59:\n        /* \"libs/Context.sol\":651:666  address payable */\n      0x00\n        /* \"libs/Context.sol\":685:695  msg.sender */\n      caller\n        /* \"libs/Context.sol\":678:695  return msg.sender */\n      swap1\n      pop\n        /* \"libs/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n      swap1\n      jump\t// out\n        /* \"libs/ERC20.sol\":9348:9688  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_60:\n        /* \"libs/ERC20.sol\":9466:9467  0 */\n      0x00\n        /* \"libs/ERC20.sol\":9449:9468  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"libs/ERC20.sol\":9449:9454  owner */\n      dup4\n        /* \"libs/ERC20.sol\":9449:9468  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"libs/ERC20.sol\":9441:9509  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_93\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x24\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208\n      0x24\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_93:\n        /* \"libs/ERC20.sol\":9546:9547  0 */\n      0x00\n        /* \"libs/ERC20.sol\":9527:9548  spender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"libs/ERC20.sol\":9527:9534  spender */\n      dup3\n        /* \"libs/ERC20.sol\":9527:9548  spender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"libs/ERC20.sol\":9519:9587  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_94\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x22\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029\n      0x22\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_94:\n        /* \"libs/ERC20.sol\":9628:9634  amount */\n      dup1\n        /* \"libs/ERC20.sol\":9598:9609  _allowances */\n      0x01\n        /* \"libs/ERC20.sol\":9598:9616  _allowances[owner] */\n      0x00\n        /* \"libs/ERC20.sol\":9610:9615  owner */\n      dup6\n        /* \"libs/ERC20.sol\":9598:9616  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"libs/ERC20.sol\":9598:9625  _allowances[owner][spender] */\n      0x00\n        /* \"libs/ERC20.sol\":9617:9624  spender */\n      dup5\n        /* \"libs/ERC20.sol\":9598:9625  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"libs/ERC20.sol\":9598:9634  _allowances[owner][spender] = amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"libs/ERC20.sol\":9665:9672  spender */\n      dup2\n        /* \"libs/ERC20.sol\":9649:9681  Approval(owner, spender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"libs/ERC20.sol\":9658:9663  owner */\n      dup4\n        /* \"libs/ERC20.sol\":9649:9681  Approval(owner, spender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"libs/ERC20.sol\":9674:9680  amount */\n      dup4\n        /* \"libs/ERC20.sol\":9649:9681  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"libs/ERC20.sol\":9348:9688  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"libs/ERC20.sol\":7024:7554  function _transfer(address sender, address recipient, uint256 amount) internal virtual {... */\n    tag_64:\n        /* \"libs/ERC20.sol\":7147:7148  0 */\n      0x00\n        /* \"libs/ERC20.sol\":7129:7149  sender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"libs/ERC20.sol\":7129:7135  sender */\n      dup4\n        /* \"libs/ERC20.sol\":7129:7149  sender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"libs/ERC20.sol\":7121:7191  require(sender != address(0), \"ERC20: transfer from the zero address\") */\n      tag_96\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x25\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea\n      0x25\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_96:\n        /* \"libs/ERC20.sol\":7230:7231  0 */\n      0x00\n        /* \"libs/ERC20.sol\":7209:7232  recipient != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"libs/ERC20.sol\":7209:7218  recipient */\n      dup3\n        /* \"libs/ERC20.sol\":7209:7232  recipient != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"libs/ERC20.sol\":7201:7272  require(recipient != address(0), \"ERC20: transfer to the zero address\") */\n      tag_97\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x23\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f\n      0x23\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_97:\n        /* \"libs/ERC20.sol\":7283:7330  _beforeTokenTransfer(sender, recipient, amount) */\n      tag_98\n        /* \"libs/ERC20.sol\":7304:7310  sender */\n      dup4\n        /* \"libs/ERC20.sol\":7312:7321  recipient */\n      dup4\n        /* \"libs/ERC20.sol\":7323:7329  amount */\n      dup4\n        /* \"libs/ERC20.sol\":7283:7303  _beforeTokenTransfer */\n      tag_99\n        /* \"libs/ERC20.sol\":7283:7330  _beforeTokenTransfer(sender, recipient, amount) */\n      jump\t// in\n    tag_98:\n        /* \"libs/ERC20.sol\":7361:7432  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_100\n        /* \"libs/ERC20.sol\":7383:7389  amount */\n      dup2\n        /* \"libs/ERC20.sol\":7361:7432  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      data_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6\n      0x26\n      swap2\n      codecopy\n        /* \"libs/ERC20.sol\":7361:7370  _balances */\n      0x00\n        /* \"libs/ERC20.sol\":7361:7378  _balances[sender] */\n      dup1\n        /* \"libs/ERC20.sol\":7371:7377  sender */\n      dup8\n        /* \"libs/ERC20.sol\":7361:7378  _balances[sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"libs/ERC20.sol\":7361:7382  _balances[sender].sub */\n      tag_69\n      swap1\n        /* \"libs/ERC20.sol\":7361:7432  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_100:\n        /* \"libs/ERC20.sol\":7341:7350  _balances */\n      0x00\n        /* \"libs/ERC20.sol\":7341:7358  _balances[sender] */\n      dup1\n        /* \"libs/ERC20.sol\":7351:7357  sender */\n      dup6\n        /* \"libs/ERC20.sol\":7341:7358  _balances[sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"libs/ERC20.sol\":7341:7432  _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"libs/ERC20.sol\":7465:7497  _balances[recipient].add(amount) */\n      tag_101\n        /* \"libs/ERC20.sol\":7490:7496  amount */\n      dup2\n        /* \"libs/ERC20.sol\":7465:7474  _balances */\n      0x00\n        /* \"libs/ERC20.sol\":7465:7485  _balances[recipient] */\n      dup1\n        /* \"libs/ERC20.sol\":7475:7484  recipient */\n      dup6\n        /* \"libs/ERC20.sol\":7465:7485  _balances[recipient] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"libs/ERC20.sol\":7465:7489  _balances[recipient].add */\n      tag_76\n      swap1\n        /* \"libs/ERC20.sol\":7465:7497  _balances[recipient].add(amount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_101:\n        /* \"libs/ERC20.sol\":7442:7451  _balances */\n      0x00\n        /* \"libs/ERC20.sol\":7442:7462  _balances[recipient] */\n      dup1\n        /* \"libs/ERC20.sol\":7452:7461  recipient */\n      dup5\n        /* \"libs/ERC20.sol\":7442:7462  _balances[recipient] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"libs/ERC20.sol\":7442:7497  _balances[recipient] = _balances[recipient].add(amount) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"libs/ERC20.sol\":7529:7538  recipient */\n      dup2\n        /* \"libs/ERC20.sol\":7512:7547  Transfer(sender, recipient, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"libs/ERC20.sol\":7521:7527  sender */\n      dup4\n        /* \"libs/ERC20.sol\":7512:7547  Transfer(sender, recipient, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"libs/ERC20.sol\":7540:7546  amount */\n      dup4\n        /* \"libs/ERC20.sol\":7512:7547  Transfer(sender, recipient, amount) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"libs/ERC20.sol\":7024:7554  function _transfer(address sender, address recipient, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"libs/SafeMath.sol\":5432:5595  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n    tag_69:\n        /* \"libs/SafeMath.sol\":5518:5525  uint256 */\n      0x00\n        /* \"libs/SafeMath.sol\":5550:5551  a */\n      dup4\n        /* \"libs/SafeMath.sol\":5545:5546  b */\n      dup4\n        /* \"libs/SafeMath.sol\":5545:5551  b <= a */\n      gt\n      iszero\n        /* \"libs/SafeMath.sol\":5553:5565  errorMessage */\n      dup3\n        /* \"libs/SafeMath.sol\":5537:5566  require(b <= a, errorMessage) */\n      swap1\n      tag_103\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_104:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_106\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_104)\n    tag_106:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_107\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_107:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_103:\n      pop\n        /* \"libs/SafeMath.sol\":5587:5588  b */\n      dup3\n        /* \"libs/SafeMath.sol\":5583:5584  a */\n      dup5\n        /* \"libs/SafeMath.sol\":5583:5588  a - b */\n      sub\n        /* \"libs/SafeMath.sol\":5576:5588  return a - b */\n      swap1\n      pop\n        /* \"libs/SafeMath.sol\":5432:5595  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"libs/SafeMath.sol\":2690:2865  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_76:\n        /* \"libs/SafeMath.sol\":2748:2755  uint256 */\n      0x00\n        /* \"libs/SafeMath.sol\":2767:2776  uint256 c */\n      dup1\n        /* \"libs/SafeMath.sol\":2783:2784  b */\n      dup3\n        /* \"libs/SafeMath.sol\":2779:2780  a */\n      dup5\n        /* \"libs/SafeMath.sol\":2779:2784  a + b */\n      add\n        /* \"libs/SafeMath.sol\":2767:2784  uint256 c = a + b */\n      swap1\n      pop\n        /* \"libs/SafeMath.sol\":2807:2808  a */\n      dup4\n        /* \"libs/SafeMath.sol\":2802:2803  c */\n      dup2\n        /* \"libs/SafeMath.sol\":2802:2808  c >= a */\n      lt\n      iszero\n        /* \"libs/SafeMath.sol\":2794:2840  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1b\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_109:\n        /* \"libs/SafeMath.sol\":2857:2858  c */\n      dup1\n        /* \"libs/SafeMath.sol\":2850:2858  return c */\n      swap2\n      pop\n      pop\n        /* \"libs/SafeMath.sol\":2690:2865  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"libs/ERC20.sol\":10694:10786  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { } */\n    tag_99:\n      pop\n      pop\n      pop\n      jump\t// out\n    stop\n    data_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f 45524332303a207472616e7366657220746f20746865207a65726f2061646472657373\n    data_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029 45524332303a20617070726f766520746f20746865207a65726f2061646472657373\n    data_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6 45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365\n    data_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330 45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365\n    data_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea 45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373\n    data_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208 45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373\n    data_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8 45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f\n\n    auxdata: 0xa264697066735822122020fd6b48c425d10bda1b4de28fac56c3177c7e589848ede27215125c69468f5d64736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b506040516200139f3803806200139f833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b838201915060208201858111156200006f57600080fd5b82518660018202830111640100000000821117156200008d57600080fd5b8083526020830192505050908051906020019080838360005b83811015620000c3578082015181840152602081019050620000a6565b50505050905090810190601f168015620000f15780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011557600080fd5b838201915060208201858111156200012c57600080fd5b82518660018202830111640100000000821117156200014a57600080fd5b8083526020830192505050908051906020019080838360005b838110156200018057808201518184015260208101905062000163565b50505050905090810190601f168015620001ae5780820380516001836020036101000a031916815260200191505b506040525050508160039080519060200190620001cd9291906200020b565b508060049080519060200190620001e69291906200020b565b506012600560006101000a81548160ff021916908360ff1602179055505050620002b1565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024e57805160ff19168380011785556200027f565b828001600101855582156200027f579182015b828111156200027e57825182559160200191906001019062000261565b5b5090506200028e919062000292565b5090565b5b80821115620002ad57600081600090555060010162000293565b5090565b6110de80620002c16000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025857806370a08231146102bc57806395d89b4114610314578063a457c2d714610397578063a9059cbb146103fb578063dd62ed3e1461045f576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019557806323b872dd146101b3578063313ce56714610237575b600080fd5b6100b66104d7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610579565b60405180821515815260200191505060405180910390f35b61019d610597565b6040518082815260200191505060405180910390f35b61021f600480360360608110156101c957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105a1565b60405180821515815260200191505060405180910390f35b61023f61067a565b604051808260ff16815260200191505060405180910390f35b6102a46004803603604081101561026e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610691565b60405180821515815260200191505060405180910390f35b6102fe600480360360208110156102d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610744565b6040518082815260200191505060405180910390f35b61031c61078c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035c578082015181840152602081019050610341565b50505050905090810190601f1680156103895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103e3600480360360408110156103ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061082e565b60405180821515815260200191505060405180910390f35b6104476004803603604081101561041157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108fb565b60405180821515815260200191505060405180910390f35b6104c16004803603604081101561047557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610919565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561056f5780601f106105445761010080835404028352916020019161056f565b820191906000526020600020905b81548152906001019060200180831161055257829003601f168201915b5050505050905090565b600061058d6105866109a0565b84846109a8565b6001905092915050565b6000600254905090565b60006105ae848484610b9f565b61066f846105ba6109a0565b61066a8560405180606001604052806028815260200161101360289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006106206109a0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e609092919063ffffffff16565b6109a8565b600190509392505050565b6000600560009054906101000a900460ff16905090565b600061073a61069e6109a0565b8461073585600160006106af6109a0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f1a90919063ffffffff16565b6109a8565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108245780601f106107f957610100808354040283529160200191610824565b820191906000526020600020905b81548152906001019060200180831161080757829003601f168201915b5050505050905090565b60006108f161083b6109a0565b846108ec8560405180606001604052806025815260200161108460259139600160006108656109a0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e609092919063ffffffff16565b6109a8565b6001905092915050565b600061090f6109086109a0565b8484610b9f565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a2e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806110606024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610fcb6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061103b6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fa86023913960400191505060405180910390fd5b610cb6838383610fa2565b610d2181604051806060016040528060268152602001610fed602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e609092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610db4816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f1a90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f0d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ed2578082015181840152602081019050610eb7565b50505050905090810190601f168015610eff5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5082840390509392505050565b600080828401905083811015610f98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122020fd6b48c425d10bda1b4de28fac56c3177c7e589848ede27215125c69468f5d64736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x139F CODESIZE SUB DUP1 PUSH3 0x139F DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x40 DUP2 LT ISZERO PUSH3 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH3 0x58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH3 0x6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x1 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH3 0x8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xC3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0xA6 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH3 0xF1 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE PUSH1 0x20 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH3 0x115 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH3 0x12C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x1 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH3 0x14A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 POP POP POP SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x180 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x163 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH3 0x1AE JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP POP POP DUP2 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x1CD SWAP3 SWAP2 SWAP1 PUSH3 0x20B JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x1E6 SWAP3 SWAP2 SWAP1 PUSH3 0x20B JUMP JUMPDEST POP PUSH1 0x12 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH3 0x2B1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0x24E JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x27F JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x27F JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x27E JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x261 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x28E SWAP2 SWAP1 PUSH3 0x292 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x2AD JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x293 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x10DE DUP1 PUSH3 0x2C1 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x397 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x3FB JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x45F JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x237 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDB JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x123 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x579 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19D PUSH2 0x597 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23F PUSH2 0x67A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x691 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2FE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x744 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31C PUSH2 0x78C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x35C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x341 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x389 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x82E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x447 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x8FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x475 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x919 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x56F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x544 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x56F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x552 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58D PUSH2 0x586 PUSH2 0x9A0 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5AE DUP5 DUP5 DUP5 PUSH2 0xB9F JUMP JUMPDEST PUSH2 0x66F DUP5 PUSH2 0x5BA PUSH2 0x9A0 JUMP JUMPDEST PUSH2 0x66A DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1013 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x620 PUSH2 0x9A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x73A PUSH2 0x69E PUSH2 0x9A0 JUMP JUMPDEST DUP5 PUSH2 0x735 DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x6AF PUSH2 0x9A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF1A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x824 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7F9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x824 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x807 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8F1 PUSH2 0x83B PUSH2 0x9A0 JUMP JUMPDEST DUP5 PUSH2 0x8EC DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1084 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x865 PUSH2 0x9A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x90F PUSH2 0x908 PUSH2 0x9A0 JUMP JUMPDEST DUP5 DUP5 PUSH2 0xB9F JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA2E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1060 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xAB4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFCB PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC25 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x103B PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCAB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFA8 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCB6 DUP4 DUP4 DUP4 PUSH2 0xFA2 JUMP JUMPDEST PUSH2 0xD21 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFED PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xDB4 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF1A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0xF0D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xED2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEB7 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xEFF JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP3 DUP5 SUB SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xF98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP POP POP JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F766520746F20746865207A65726F20616464 PUSH19 0x65737345524332303A207472616E7366657220 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E636545524332 ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x20616C6C6F77616E636545524332303A20747261 PUSH15 0x736665722066726F6D20746865207A PUSH6 0x726F20616464 PUSH19 0x65737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x735822122020FD PUSH12 0x48C425D10BDA1B4DE28FAC56 0xC3 OR PUSH29 0x7E589848EDE27215125C69468F5D64736F6C634300060C003300000000 ",
							"sourceMap": "1314:9474:3:-:0;;;1951:145;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2033:5;2025;:13;;;;;;;;;;;;:::i;:::-;;2058:7;2048;:17;;;;;;;;;;;;:::i;:::-;;2087:2;2075:9;;:14;;;;;;;;;;;;;;;;;;1951:145;;1314:9474;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025857806370a08231146102bc57806395d89b4114610314578063a457c2d714610397578063a9059cbb146103fb578063dd62ed3e1461045f576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019557806323b872dd146101b3578063313ce56714610237575b600080fd5b6100b66104d7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610579565b60405180821515815260200191505060405180910390f35b61019d610597565b6040518082815260200191505060405180910390f35b61021f600480360360608110156101c957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105a1565b60405180821515815260200191505060405180910390f35b61023f61067a565b604051808260ff16815260200191505060405180910390f35b6102a46004803603604081101561026e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610691565b60405180821515815260200191505060405180910390f35b6102fe600480360360208110156102d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610744565b6040518082815260200191505060405180910390f35b61031c61078c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035c578082015181840152602081019050610341565b50505050905090810190601f1680156103895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103e3600480360360408110156103ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061082e565b60405180821515815260200191505060405180910390f35b6104476004803603604081101561041157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108fb565b60405180821515815260200191505060405180910390f35b6104c16004803603604081101561047557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610919565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561056f5780601f106105445761010080835404028352916020019161056f565b820191906000526020600020905b81548152906001019060200180831161055257829003601f168201915b5050505050905090565b600061058d6105866109a0565b84846109a8565b6001905092915050565b6000600254905090565b60006105ae848484610b9f565b61066f846105ba6109a0565b61066a8560405180606001604052806028815260200161101360289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006106206109a0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e609092919063ffffffff16565b6109a8565b600190509392505050565b6000600560009054906101000a900460ff16905090565b600061073a61069e6109a0565b8461073585600160006106af6109a0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f1a90919063ffffffff16565b6109a8565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108245780601f106107f957610100808354040283529160200191610824565b820191906000526020600020905b81548152906001019060200180831161080757829003601f168201915b5050505050905090565b60006108f161083b6109a0565b846108ec8560405180606001604052806025815260200161108460259139600160006108656109a0565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e609092919063ffffffff16565b6109a8565b6001905092915050565b600061090f6109086109a0565b8484610b9f565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a2e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806110606024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610fcb6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061103b6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610fa86023913960400191505060405180910390fd5b610cb6838383610fa2565b610d2181604051806060016040528060268152602001610fed602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e609092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610db4816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f1a90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290610f0d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ed2578082015181840152602081019050610eb7565b50505050905090810190601f168015610eff5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5082840390509392505050565b600080828401905083811015610f98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122020fd6b48c425d10bda1b4de28fac56c3177c7e589848ede27215125c69468f5d64736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x397 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x3FB JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x45F JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x237 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDB JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x123 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x579 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19D PUSH2 0x597 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23F PUSH2 0x67A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x691 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2FE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x744 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31C PUSH2 0x78C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x35C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x341 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x389 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x82E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x447 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x8FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x475 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x919 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x56F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x544 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x56F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x552 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58D PUSH2 0x586 PUSH2 0x9A0 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5AE DUP5 DUP5 DUP5 PUSH2 0xB9F JUMP JUMPDEST PUSH2 0x66F DUP5 PUSH2 0x5BA PUSH2 0x9A0 JUMP JUMPDEST PUSH2 0x66A DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1013 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x620 PUSH2 0x9A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x73A PUSH2 0x69E PUSH2 0x9A0 JUMP JUMPDEST DUP5 PUSH2 0x735 DUP6 PUSH1 0x1 PUSH1 0x0 PUSH2 0x6AF PUSH2 0x9A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF1A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x824 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7F9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x824 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x807 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8F1 PUSH2 0x83B PUSH2 0x9A0 JUMP JUMPDEST DUP5 PUSH2 0x8EC DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1084 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x0 PUSH2 0x865 PUSH2 0x9A0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x90F PUSH2 0x908 PUSH2 0x9A0 JUMP JUMPDEST DUP5 DUP5 PUSH2 0xB9F JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xA2E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1060 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xAB4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFCB PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC25 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x103B PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCAB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xFA8 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCB6 DUP4 DUP4 DUP4 PUSH2 0xFA2 JUMP JUMPDEST PUSH2 0xD21 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFED PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xE60 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xDB4 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF1A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 0xF0D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xED2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xEB7 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xEFF JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP3 DUP5 SUB SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xF98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP POP POP JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F766520746F20746865207A65726F20616464 PUSH19 0x65737345524332303A207472616E7366657220 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E636545524332 ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x20616C6C6F77616E636545524332303A20747261 PUSH15 0x736665722066726F6D20746865207A PUSH6 0x726F20616464 PUSH19 0x65737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x735822122020FD PUSH12 0x48C425D10BDA1B4DE28FAC56 0xC3 OR PUSH29 0x7E589848EDE27215125C69468F5D64736F6C634300060C003300000000 ",
							"sourceMap": "1314:9474:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2161:89;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4237:166;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3228:106;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4870:317;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3079:89;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;5582:215;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3392:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2363:93;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6284:266;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3720:172;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3950:149;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2161:89;2206:13;2238:5;2231:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2161:89;:::o;4237:166::-;4320:4;4336:39;4345:12;:10;:12::i;:::-;4359:7;4368:6;4336:8;:39::i;:::-;4392:4;4385:11;;4237:166;;;;:::o;3228:106::-;3289:7;3315:12;;3308:19;;3228:106;:::o;4870:317::-;4976:4;4992:36;5002:6;5010:9;5021:6;4992:9;:36::i;:::-;5038:121;5047:6;5055:12;:10;:12::i;:::-;5069:89;5107:6;5069:89;;;;;;;;;;;;;;;;;:11;:19;5081:6;5069:19;;;;;;;;;;;;;;;:33;5089:12;:10;:12::i;:::-;5069:33;;;;;;;;;;;;;;;;:37;;:89;;;;;:::i;:::-;5038:8;:121::i;:::-;5176:4;5169:11;;4870:317;;;;;:::o;3079:89::-;3128:5;3152:9;;;;;;;;;;;3145:16;;3079:89;:::o;5582:215::-;5670:4;5686:83;5695:12;:10;:12::i;:::-;5709:7;5718:50;5757:10;5718:11;:25;5730:12;:10;:12::i;:::-;5718:25;;;;;;;;;;;;;;;:34;5744:7;5718:34;;;;;;;;;;;;;;;;:38;;:50;;;;:::i;:::-;5686:8;:83::i;:::-;5786:4;5779:11;;5582:215;;;;:::o;3392:125::-;3466:7;3492:9;:18;3502:7;3492:18;;;;;;;;;;;;;;;;3485:25;;3392:125;;;:::o;2363:93::-;2410:13;2442:7;2435:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2363:93;:::o;6284:266::-;6377:4;6393:129;6402:12;:10;:12::i;:::-;6416:7;6425:96;6464:15;6425:96;;;;;;;;;;;;;;;;;:11;:25;6437:12;:10;:12::i;:::-;6425:25;;;;;;;;;;;;;;;:34;6451:7;6425:34;;;;;;;;;;;;;;;;:38;;:96;;;;;:::i;:::-;6393:8;:129::i;:::-;6539:4;6532:11;;6284:266;;;;:::o;3720:172::-;3806:4;3822:42;3832:12;:10;:12::i;:::-;3846:9;3857:6;3822:9;:42::i;:::-;3881:4;3874:11;;3720:172;;;;:::o;3950:149::-;4039:7;4065:11;:18;4077:5;4065:18;;;;;;;;;;;;;;;:27;4084:7;4065:27;;;;;;;;;;;;;;;;4058:34;;3950:149;;;;:::o;598:104:1:-;651:15;685:10;678:17;;598:104;:::o;9348:340:3:-;9466:1;9449:19;;:5;:19;;;;9441:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9546:1;9527:21;;:7;:21;;;;9519:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9628:6;9598:11;:18;9610:5;9598:18;;;;;;;;;;;;;;;:27;9617:7;9598:27;;;;;;;;;;;;;;;:36;;;;9665:7;9649:32;;9658:5;9649:32;;;9674:6;9649:32;;;;;;;;;;;;;;;;;;9348:340;;;:::o;7024:530::-;7147:1;7129:20;;:6;:20;;;;7121:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7230:1;7209:23;;:9;:23;;;;7201:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7283:47;7304:6;7312:9;7323:6;7283:20;:47::i;:::-;7361:71;7383:6;7361:71;;;;;;;;;;;;;;;;;:9;:17;7371:6;7361:17;;;;;;;;;;;;;;;;:21;;:71;;;;;:::i;:::-;7341:9;:17;7351:6;7341:17;;;;;;;;;;;;;;;:91;;;;7465:32;7490:6;7465:9;:20;7475:9;7465:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;7442:9;:20;7452:9;7442:20;;;;;;;;;;;;;;;:55;;;;7529:9;7512:35;;7521:6;7512:35;;;7540:6;7512:35;;;;;;;;;;;;;;;;;;7024:530;;;:::o;5432:163:5:-;5518:7;5550:1;5545;:6;;5553:12;5537:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5587:1;5583;:5;5576:12;;5432:163;;;;;:::o;2690:175::-;2748:7;2767:9;2783:1;2779;:5;2767:17;;2807:1;2802;:6;;2794:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2857:1;2850:8;;;2690:175;;;;:::o;10694:92:3:-;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "863600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "1431",
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "1218",
								"decimals()": "1144",
								"decreaseAllowance(address,uint256)": "infinite",
								"increaseAllowance(address,uint256)": "infinite",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "1058",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "15",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_setupDecimals(uint8)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "80"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "CALLVALUE",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSHSIZE",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "CODESIZE",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SUB",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSHSIZE",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "LT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "2"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "tag",
									"source": 3,
									"value": "2"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP4",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP5",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "100000000"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "3"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "tag",
									"source": 3,
									"value": "3"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP6",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "tag",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP7",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MUL",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "100000000"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "OR",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "5"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "tag",
									"source": 3,
									"value": "5"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "tag",
									"source": 3,
									"value": "6"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "LT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "8"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP5",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "6"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "tag",
									"source": 3,
									"value": "8"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "1F"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "9"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SUB",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SUB",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "100"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "EXP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SUB",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "NOT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "tag",
									"source": 3,
									"value": "9"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP4",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP5",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "100000000"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "10"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "tag",
									"source": 3,
									"value": "10"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP6",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "tag",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP7",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MUL",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "100000000"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "OR",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "12"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "tag",
									"source": 3,
									"value": "12"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "tag",
									"source": 3,
									"value": "13"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "LT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "15"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP5",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "13"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "tag",
									"source": 3,
									"value": "15"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "1F"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "16"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SUB",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SUB",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "100"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "EXP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SUB",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "NOT",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "tag",
									"source": 3,
									"value": "16"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 2033,
									"end": 2038,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 2025,
									"end": 2030,
									"name": "PUSH",
									"source": 3,
									"value": "3"
								},
								{
									"begin": 2025,
									"end": 2038,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2025,
									"end": 2038,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 2025,
									"end": 2038,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 2025,
									"end": 2038,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2025,
									"end": 2038,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 2025,
									"end": 2038,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 2025,
									"end": 2038,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2025,
									"end": 2038,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "19"
								},
								{
									"begin": 2025,
									"end": 2038,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 2025,
									"end": 2038,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 2025,
									"end": 2038,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2025,
									"end": 2038,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 2025,
									"end": 2038,
									"name": "JUMP",
									"source": 3,
									"value": "[in]"
								},
								{
									"begin": 2025,
									"end": 2038,
									"name": "tag",
									"source": 3,
									"value": "19"
								},
								{
									"begin": 2025,
									"end": 2038,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 2025,
									"end": 2038,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 2058,
									"end": 2065,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 2048,
									"end": 2055,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 2048,
									"end": 2065,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2048,
									"end": 2065,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 2048,
									"end": 2065,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 2048,
									"end": 2065,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2048,
									"end": 2065,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 2048,
									"end": 2065,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 2048,
									"end": 2065,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2048,
									"end": 2065,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "21"
								},
								{
									"begin": 2048,
									"end": 2065,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 2048,
									"end": 2065,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 2048,
									"end": 2065,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2048,
									"end": 2065,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 2048,
									"end": 2065,
									"name": "JUMP",
									"source": 3,
									"value": "[in]"
								},
								{
									"begin": 2048,
									"end": 2065,
									"name": "tag",
									"source": 3,
									"value": "21"
								},
								{
									"begin": 2048,
									"end": 2065,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 2048,
									"end": 2065,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 2087,
									"end": 2089,
									"name": "PUSH",
									"source": 3,
									"value": "12"
								},
								{
									"begin": 2075,
									"end": 2084,
									"name": "PUSH",
									"source": 3,
									"value": "5"
								},
								{
									"begin": 2075,
									"end": 2084,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 2075,
									"end": 2089,
									"name": "PUSH",
									"source": 3,
									"value": "100"
								},
								{
									"begin": 2075,
									"end": 2089,
									"name": "EXP",
									"source": 3
								},
								{
									"begin": 2075,
									"end": 2089,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 2075,
									"end": 2089,
									"name": "SLOAD",
									"source": 3
								},
								{
									"begin": 2075,
									"end": 2089,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 2075,
									"end": 2089,
									"name": "PUSH",
									"source": 3,
									"value": "FF"
								},
								{
									"begin": 2075,
									"end": 2089,
									"name": "MUL",
									"source": 3
								},
								{
									"begin": 2075,
									"end": 2089,
									"name": "NOT",
									"source": 3
								},
								{
									"begin": 2075,
									"end": 2089,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 2075,
									"end": 2089,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2075,
									"end": 2089,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 2075,
									"end": 2089,
									"name": "PUSH",
									"source": 3,
									"value": "FF"
								},
								{
									"begin": 2075,
									"end": 2089,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 2075,
									"end": 2089,
									"name": "MUL",
									"source": 3
								},
								{
									"begin": 2075,
									"end": 2089,
									"name": "OR",
									"source": 3
								},
								{
									"begin": 2075,
									"end": 2089,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 2075,
									"end": 2089,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 2075,
									"end": 2089,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1951,
									"end": 2096,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "22"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "tag",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SLOAD",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "100"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "MUL",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SUB",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "2"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DIV",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "KECCAK256",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "1F"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DIV",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SWAP3",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "1F"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "LT",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "FF"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "NOT",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "OR",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP6",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "23"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "tag",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP6",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "23"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "tag",
									"source": 3,
									"value": "25"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "26"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "25"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "tag",
									"source": 3,
									"value": "26"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "tag",
									"source": 3,
									"value": "23"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "27"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "28"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMP",
									"source": 3,
									"value": "[in]"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "tag",
									"source": 3,
									"value": "27"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMP",
									"source": 3,
									"value": "[out]"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "tag",
									"source": 3,
									"value": "28"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "tag",
									"source": 3,
									"value": "29"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "GT",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "30"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "29"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "tag",
									"source": 3,
									"value": "30"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMP",
									"source": 3,
									"value": "[out]"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "tag",
									"source": 3,
									"value": "22"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1314,
									"end": 10788,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122020fd6b48c425d10bda1b4de28fac56c3177c7e589848ede27215125c69468f5d64736f6c634300060c0033",
									".code": [
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "tag",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "SHR",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH",
											"source": 3,
											"value": "39509351"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH",
											"source": 3,
											"value": "39509351"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH",
											"source": 3,
											"value": "70A08231"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH",
											"source": 3,
											"value": "95D89B41"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH",
											"source": 3,
											"value": "A457C2D7"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH",
											"source": 3,
											"value": "A9059CBB"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH",
											"source": 3,
											"value": "DD62ED3E"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "tag",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH",
											"source": 3,
											"value": "6FDDE03"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH",
											"source": 3,
											"value": "95EA7B3"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH",
											"source": 3,
											"value": "18160DDD"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH",
											"source": 3,
											"value": "23B872DD"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH",
											"source": 3,
											"value": "313CE567"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "tag",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1314,
											"end": 10788,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "tag",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "tag",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "tag",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "tag",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "EXP",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "tag",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "tag",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "tag",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "tag",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "tag",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "tag",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "tag",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "tag",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "tag",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "tag",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "29"
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "tag",
											"source": 3,
											"value": "29"
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "PUSH",
											"source": 3,
											"value": "FF"
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "tag",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "tag",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "tag",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "tag",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "tag",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "tag",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "tag",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "tag",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "tag",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "tag",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "EXP",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "tag",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "tag",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "43"
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "tag",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "tag",
											"source": 3,
											"value": "43"
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "tag",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "tag",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "tag",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "tag",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "tag",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "tag",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "tag",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2206,
											"end": 2219,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2238,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "tag",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "tag",
											"source": 3,
											"value": "55"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "55"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "tag",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2231,
											"end": 2243,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2161,
											"end": 2250,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "tag",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4320,
											"end": 4324,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4336,
											"end": 4375,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "57"
										},
										{
											"begin": 4345,
											"end": 4357,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 4345,
											"end": 4355,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 4345,
											"end": 4357,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4345,
											"end": 4357,
											"name": "tag",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 4345,
											"end": 4357,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4366,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 4368,
											"end": 4374,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 4336,
											"end": 4344,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 4336,
											"end": 4375,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4336,
											"end": 4375,
											"name": "tag",
											"source": 3,
											"value": "57"
										},
										{
											"begin": 4336,
											"end": 4375,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4392,
											"end": 4396,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 4385,
											"end": 4396,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4385,
											"end": 4396,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4237,
											"end": 4403,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "tag",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3289,
											"end": 3296,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3315,
											"end": 3327,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 3315,
											"end": 3327,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3308,
											"end": 3327,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3308,
											"end": 3327,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3228,
											"end": 3334,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "tag",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4976,
											"end": 4980,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4992,
											"end": 5028,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "63"
										},
										{
											"begin": 5002,
											"end": 5008,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 5010,
											"end": 5019,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 5021,
											"end": 5027,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 4992,
											"end": 5001,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 4992,
											"end": 5028,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4992,
											"end": 5028,
											"name": "tag",
											"source": 3,
											"value": "63"
										},
										{
											"begin": 4992,
											"end": 5028,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5038,
											"end": 5159,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 5047,
											"end": 5053,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 5055,
											"end": 5067,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "66"
										},
										{
											"begin": 5055,
											"end": 5065,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 5055,
											"end": 5067,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5055,
											"end": 5067,
											"name": "tag",
											"source": 3,
											"value": "66"
										},
										{
											"begin": 5055,
											"end": 5067,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 5107,
											"end": 5113,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "PUSH",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "PUSH data",
											"source": 3,
											"value": "974D1B4421DA69CC60B481194F0DAD36A5BB4E23DA810DA7A7FB30CDBA178330"
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "PUSH",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "CODECOPY",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5080,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 5069,
											"end": 5088,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5081,
											"end": 5087,
											"name": "DUP12",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5088,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5069,
											"end": 5088,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5088,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5069,
											"end": 5088,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5088,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5088,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5088,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5069,
											"end": 5088,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5088,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5088,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5088,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5088,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5069,
											"end": 5088,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5088,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5069,
											"end": 5088,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5102,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5089,
											"end": 5101,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "68"
										},
										{
											"begin": 5089,
											"end": 5099,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 5089,
											"end": 5101,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5089,
											"end": 5101,
											"name": "tag",
											"source": 3,
											"value": "68"
										},
										{
											"begin": 5089,
											"end": 5101,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5102,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5069,
											"end": 5102,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5102,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5069,
											"end": 5102,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5102,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5102,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5102,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5069,
											"end": 5102,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5102,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5102,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5102,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5102,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5069,
											"end": 5102,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5102,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5069,
											"end": 5102,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5102,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5106,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "69"
										},
										{
											"begin": 5069,
											"end": 5106,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "tag",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 5069,
											"end": 5158,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5038,
											"end": 5046,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 5038,
											"end": 5159,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5038,
											"end": 5159,
											"name": "tag",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 5038,
											"end": 5159,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5176,
											"end": 5180,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 5169,
											"end": 5180,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5169,
											"end": 5180,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4870,
											"end": 5187,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "tag",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3128,
											"end": 3133,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3152,
											"end": 3161,
											"name": "PUSH",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 3152,
											"end": 3161,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3152,
											"end": 3161,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3152,
											"end": 3161,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3152,
											"end": 3161,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3152,
											"end": 3161,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 3152,
											"end": 3161,
											"name": "EXP",
											"source": 3
										},
										{
											"begin": 3152,
											"end": 3161,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3152,
											"end": 3161,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 3152,
											"end": 3161,
											"name": "PUSH",
											"source": 3,
											"value": "FF"
										},
										{
											"begin": 3152,
											"end": 3161,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3145,
											"end": 3161,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3145,
											"end": 3161,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3079,
											"end": 3168,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "tag",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5670,
											"end": 5674,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5686,
											"end": 5769,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 5695,
											"end": 5707,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "73"
										},
										{
											"begin": 5695,
											"end": 5705,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 5695,
											"end": 5707,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5695,
											"end": 5707,
											"name": "tag",
											"source": 3,
											"value": "73"
										},
										{
											"begin": 5695,
											"end": 5707,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5709,
											"end": 5716,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5768,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 5757,
											"end": 5767,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5729,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 5718,
											"end": 5743,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5730,
											"end": 5742,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "75"
										},
										{
											"begin": 5730,
											"end": 5740,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 5730,
											"end": 5742,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5730,
											"end": 5742,
											"name": "tag",
											"source": 3,
											"value": "75"
										},
										{
											"begin": 5730,
											"end": 5742,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5743,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5718,
											"end": 5743,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5743,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5718,
											"end": 5743,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5743,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5743,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5743,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5718,
											"end": 5743,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5743,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5743,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5743,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5743,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5718,
											"end": 5743,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5743,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5718,
											"end": 5743,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5752,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5744,
											"end": 5751,
											"name": "DUP10",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5752,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5718,
											"end": 5752,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5752,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5718,
											"end": 5752,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5752,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5752,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5752,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5718,
											"end": 5752,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5752,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5752,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5752,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5752,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5718,
											"end": 5752,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5752,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5718,
											"end": 5752,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5752,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5756,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "76"
										},
										{
											"begin": 5718,
											"end": 5756,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5768,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5768,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5768,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5718,
											"end": 5768,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5718,
											"end": 5768,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5718,
											"end": 5768,
											"name": "tag",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 5718,
											"end": 5768,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5686,
											"end": 5694,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 5686,
											"end": 5769,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5686,
											"end": 5769,
											"name": "tag",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 5686,
											"end": 5769,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5786,
											"end": 5790,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 5779,
											"end": 5790,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5779,
											"end": 5790,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5582,
											"end": 5797,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "tag",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3466,
											"end": 3473,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3492,
											"end": 3501,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3492,
											"end": 3510,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3502,
											"end": 3509,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3492,
											"end": 3510,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3492,
											"end": 3510,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3492,
											"end": 3510,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3492,
											"end": 3510,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3492,
											"end": 3510,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3492,
											"end": 3510,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3492,
											"end": 3510,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3492,
											"end": 3510,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3492,
											"end": 3510,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3492,
											"end": 3510,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3492,
											"end": 3510,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3492,
											"end": 3510,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3492,
											"end": 3510,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3492,
											"end": 3510,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3492,
											"end": 3510,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3492,
											"end": 3510,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3485,
											"end": 3510,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3485,
											"end": 3510,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3392,
											"end": 3517,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "tag",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2410,
											"end": 2423,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2442,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "79"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "79"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "tag",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "tag",
											"source": 3,
											"value": "81"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "81"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "tag",
											"source": 3,
											"value": "79"
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2435,
											"end": 2449,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2363,
											"end": 2456,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "tag",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6377,
											"end": 6381,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6393,
											"end": 6522,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "83"
										},
										{
											"begin": 6402,
											"end": 6414,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "84"
										},
										{
											"begin": 6402,
											"end": 6412,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 6402,
											"end": 6414,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6402,
											"end": 6414,
											"name": "tag",
											"source": 3,
											"value": "84"
										},
										{
											"begin": 6402,
											"end": 6414,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6416,
											"end": 6423,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "85"
										},
										{
											"begin": 6464,
											"end": 6479,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "PUSH",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "PUSH data",
											"source": 3,
											"value": "F8B476F7D28209D77D4A4AC1FE36B9F8259AA1BB6BDDFA6E89DE7E51615CF8A8"
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "PUSH",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "CODECOPY",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6436,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 6425,
											"end": 6450,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6437,
											"end": 6449,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "86"
										},
										{
											"begin": 6437,
											"end": 6447,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 6437,
											"end": 6449,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6437,
											"end": 6449,
											"name": "tag",
											"source": 3,
											"value": "86"
										},
										{
											"begin": 6437,
											"end": 6449,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6450,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6425,
											"end": 6450,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6450,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6425,
											"end": 6450,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6450,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6450,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6450,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6425,
											"end": 6450,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6450,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6450,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6450,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6450,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6425,
											"end": 6450,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6450,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6425,
											"end": 6450,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6459,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6451,
											"end": 6458,
											"name": "DUP11",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6459,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6425,
											"end": 6459,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6459,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6425,
											"end": 6459,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6459,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6459,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6459,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6425,
											"end": 6459,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6459,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6459,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6459,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6459,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6425,
											"end": 6459,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6459,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6425,
											"end": 6459,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6459,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6463,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "69"
										},
										{
											"begin": 6425,
											"end": 6463,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "tag",
											"source": 3,
											"value": "85"
										},
										{
											"begin": 6425,
											"end": 6521,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6393,
											"end": 6401,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 6393,
											"end": 6522,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6393,
											"end": 6522,
											"name": "tag",
											"source": 3,
											"value": "83"
										},
										{
											"begin": 6393,
											"end": 6522,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6539,
											"end": 6543,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 6532,
											"end": 6543,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6532,
											"end": 6543,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6284,
											"end": 6550,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "tag",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3806,
											"end": 3810,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3822,
											"end": 3864,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "88"
										},
										{
											"begin": 3832,
											"end": 3844,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "89"
										},
										{
											"begin": 3832,
											"end": 3842,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 3832,
											"end": 3844,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3832,
											"end": 3844,
											"name": "tag",
											"source": 3,
											"value": "89"
										},
										{
											"begin": 3832,
											"end": 3844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3855,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 3857,
											"end": 3863,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 3822,
											"end": 3831,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 3822,
											"end": 3864,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3822,
											"end": 3864,
											"name": "tag",
											"source": 3,
											"value": "88"
										},
										{
											"begin": 3822,
											"end": 3864,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3881,
											"end": 3885,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 3874,
											"end": 3885,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3874,
											"end": 3885,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3720,
											"end": 3892,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "tag",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4039,
											"end": 4046,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4065,
											"end": 4076,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 4065,
											"end": 4083,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4077,
											"end": 4082,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4083,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4065,
											"end": 4083,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4083,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4065,
											"end": 4083,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4083,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4083,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4083,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4065,
											"end": 4083,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4083,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4083,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4083,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4083,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4065,
											"end": 4083,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4083,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4065,
											"end": 4083,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4092,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4084,
											"end": 4091,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4092,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4065,
											"end": 4092,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4092,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4065,
											"end": 4092,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4092,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4092,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4092,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4065,
											"end": 4092,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4092,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4092,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4092,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4092,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4065,
											"end": 4092,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4092,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4065,
											"end": 4092,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 4065,
											"end": 4092,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4058,
											"end": 4092,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4058,
											"end": 4092,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3950,
											"end": 4099,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 598,
											"end": 702,
											"name": "tag",
											"source": 1,
											"value": "59"
										},
										{
											"begin": 598,
											"end": 702,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 651,
											"end": 666,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 685,
											"end": 695,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 678,
											"end": 695,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 678,
											"end": 695,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 598,
											"end": 702,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 598,
											"end": 702,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 9348,
											"end": 9688,
											"name": "tag",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 9348,
											"end": 9688,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9466,
											"end": 9467,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 9449,
											"end": 9468,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9449,
											"end": 9468,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 9449,
											"end": 9454,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9449,
											"end": 9468,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9449,
											"end": 9468,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 9449,
											"end": 9468,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 9449,
											"end": 9468,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "93"
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "PUSH",
											"source": 3,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "PUSH data",
											"source": 3,
											"value": "C953F4879035ED60E766B34720F656AAB5C697B141D924C283124ECEDB91C208"
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "CODECOPY",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "tag",
											"source": 3,
											"value": "93"
										},
										{
											"begin": 9441,
											"end": 9509,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9546,
											"end": 9547,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 9527,
											"end": 9548,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9527,
											"end": 9548,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 9527,
											"end": 9534,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 9527,
											"end": 9548,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9527,
											"end": 9548,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 9527,
											"end": 9548,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 9527,
											"end": 9548,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "94"
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "PUSH",
											"source": 3,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "PUSH",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "PUSH data",
											"source": 3,
											"value": "24883CC5FE64ACE9D0DF1893501ECB93C77180F0FF69CCA79AFFB3C316DC8029"
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "PUSH",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "CODECOPY",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "tag",
											"source": 3,
											"value": "94"
										},
										{
											"begin": 9519,
											"end": 9587,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9628,
											"end": 9634,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9609,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 9598,
											"end": 9616,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 9610,
											"end": 9615,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9616,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9598,
											"end": 9616,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9616,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9598,
											"end": 9616,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9616,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9616,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9616,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 9598,
											"end": 9616,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9616,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9616,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9616,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9616,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 9598,
											"end": 9616,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9616,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 9598,
											"end": 9616,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9625,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 9617,
											"end": 9624,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9625,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9598,
											"end": 9625,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9625,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9598,
											"end": 9625,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9625,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9625,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9625,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 9598,
											"end": 9625,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9625,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9625,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9625,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9625,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 9598,
											"end": 9625,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9625,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 9598,
											"end": 9625,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9634,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9634,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9634,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 9598,
											"end": 9634,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9665,
											"end": 9672,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 9658,
											"end": 9663,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "PUSH",
											"source": 3,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 9674,
											"end": 9680,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9649,
											"end": 9681,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 9348,
											"end": 9688,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9348,
											"end": 9688,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9348,
											"end": 9688,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9348,
											"end": 9688,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 7024,
											"end": 7554,
											"name": "tag",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 7024,
											"end": 7554,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7147,
											"end": 7148,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7129,
											"end": 7149,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7129,
											"end": 7149,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7129,
											"end": 7135,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7129,
											"end": 7149,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7129,
											"end": 7149,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7129,
											"end": 7149,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 7129,
											"end": 7149,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "96"
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "PUSH",
											"source": 3,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "PUSH",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "PUSH data",
											"source": 3,
											"value": "BAECC556B46F4ED0F2B4CB599D60785AC8563DD2DC0A5BF12EDEA1C39E5E1FEA"
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "PUSH",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "CODECOPY",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "tag",
											"source": 3,
											"value": "96"
										},
										{
											"begin": 7121,
											"end": 7191,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7230,
											"end": 7231,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7209,
											"end": 7232,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7209,
											"end": 7232,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7209,
											"end": 7218,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7209,
											"end": 7232,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7209,
											"end": 7232,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7209,
											"end": 7232,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 7209,
											"end": 7232,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "97"
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "PUSH",
											"source": 3,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "PUSH",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "PUSH data",
											"source": 3,
											"value": "557E210F7A69A685100A7E4E3D0A7024C546085CEE28910FD17D0B081D9516F"
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "PUSH",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "CODECOPY",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "tag",
											"source": 3,
											"value": "97"
										},
										{
											"begin": 7201,
											"end": 7272,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7283,
											"end": 7330,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "98"
										},
										{
											"begin": 7304,
											"end": 7310,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7312,
											"end": 7321,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7323,
											"end": 7329,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7283,
											"end": 7303,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "99"
										},
										{
											"begin": 7283,
											"end": 7330,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 7283,
											"end": 7330,
											"name": "tag",
											"source": 3,
											"value": "98"
										},
										{
											"begin": 7283,
											"end": 7330,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 7383,
											"end": 7389,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "PUSH",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "PUSH data",
											"source": 3,
											"value": "4107E8A8B9E94BF8FF83080DDEC1C0BFFE897EBC2241B89D44F66B3D274088B6"
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "PUSH",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "CODECOPY",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7370,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7361,
											"end": 7378,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7371,
											"end": 7377,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7378,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7361,
											"end": 7378,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7378,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7361,
											"end": 7378,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7378,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7378,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7378,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7361,
											"end": 7378,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7378,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7378,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7378,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7378,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7361,
											"end": 7378,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7378,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7361,
											"end": 7378,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7378,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7382,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "69"
										},
										{
											"begin": 7361,
											"end": 7382,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "tag",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 7361,
											"end": 7432,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7341,
											"end": 7350,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7341,
											"end": 7358,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7351,
											"end": 7357,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 7341,
											"end": 7358,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7341,
											"end": 7358,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7341,
											"end": 7358,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7341,
											"end": 7358,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7341,
											"end": 7358,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7341,
											"end": 7358,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7341,
											"end": 7358,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7341,
											"end": 7358,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7341,
											"end": 7358,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7341,
											"end": 7358,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7341,
											"end": 7358,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7341,
											"end": 7358,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7341,
											"end": 7358,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7341,
											"end": 7358,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7341,
											"end": 7358,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 7341,
											"end": 7432,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7341,
											"end": 7432,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7341,
											"end": 7432,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 7341,
											"end": 7432,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7465,
											"end": 7497,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "101"
										},
										{
											"begin": 7490,
											"end": 7496,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7465,
											"end": 7474,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7465,
											"end": 7485,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7475,
											"end": 7484,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 7465,
											"end": 7485,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7465,
											"end": 7485,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7465,
											"end": 7485,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7465,
											"end": 7485,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7465,
											"end": 7485,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7465,
											"end": 7485,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7465,
											"end": 7485,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7465,
											"end": 7485,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7465,
											"end": 7485,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7465,
											"end": 7485,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7465,
											"end": 7485,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7465,
											"end": 7485,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7465,
											"end": 7485,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7465,
											"end": 7485,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7465,
											"end": 7485,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 7465,
											"end": 7485,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 7465,
											"end": 7489,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "76"
										},
										{
											"begin": 7465,
											"end": 7489,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7465,
											"end": 7497,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7465,
											"end": 7497,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7465,
											"end": 7497,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7465,
											"end": 7497,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7465,
											"end": 7497,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 7465,
											"end": 7497,
											"name": "tag",
											"source": 3,
											"value": "101"
										},
										{
											"begin": 7465,
											"end": 7497,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7442,
											"end": 7451,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7442,
											"end": 7462,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7452,
											"end": 7461,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 7442,
											"end": 7462,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7442,
											"end": 7462,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7442,
											"end": 7462,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7442,
											"end": 7462,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7442,
											"end": 7462,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7442,
											"end": 7462,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7442,
											"end": 7462,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7442,
											"end": 7462,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7442,
											"end": 7462,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7442,
											"end": 7462,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7442,
											"end": 7462,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7442,
											"end": 7462,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7442,
											"end": 7462,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7442,
											"end": 7462,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7442,
											"end": 7462,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 7442,
											"end": 7497,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7442,
											"end": 7497,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7442,
											"end": 7497,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 7442,
											"end": 7497,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7529,
											"end": 7538,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7521,
											"end": 7527,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "PUSH",
											"source": 3,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7540,
											"end": 7546,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7512,
											"end": 7547,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 7024,
											"end": 7554,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7024,
											"end": 7554,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7024,
											"end": 7554,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7024,
											"end": 7554,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 5432,
											"end": 5595,
											"name": "tag",
											"source": 5,
											"value": "69"
										},
										{
											"begin": 5432,
											"end": 5595,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5518,
											"end": 5525,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5550,
											"end": 5551,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5545,
											"end": 5546,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5545,
											"end": 5551,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 5545,
											"end": 5551,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 5553,
											"end": 5565,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "103"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "tag",
											"source": 5,
											"value": "104"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "106"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "104"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "tag",
											"source": 5,
											"value": "106"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "107"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "tag",
											"source": 5,
											"value": "107"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "tag",
											"source": 5,
											"value": "103"
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5537,
											"end": 5566,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5587,
											"end": 5588,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5583,
											"end": 5584,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 5583,
											"end": 5588,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5576,
											"end": 5588,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5576,
											"end": 5588,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5432,
											"end": 5595,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 5432,
											"end": 5595,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 5432,
											"end": 5595,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5432,
											"end": 5595,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5432,
											"end": 5595,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5432,
											"end": 5595,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "tag",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2748,
											"end": 2755,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2767,
											"end": 2776,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2783,
											"end": 2784,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2779,
											"end": 2780,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2779,
											"end": 2784,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2767,
											"end": 2784,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2767,
											"end": 2784,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2807,
											"end": 2808,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2802,
											"end": 2803,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "109"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 5,
											"value": "1B"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 5,
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "tag",
											"source": 5,
											"value": "109"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2857,
											"end": 2858,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2850,
											"end": 2858,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2850,
											"end": 2858,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2850,
											"end": 2858,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 10694,
											"end": 10786,
											"name": "tag",
											"source": 3,
											"value": "99"
										},
										{
											"begin": 10694,
											"end": 10786,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10694,
											"end": 10786,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10694,
											"end": 10786,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10694,
											"end": 10786,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10694,
											"end": 10786,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										}
									],
									".data": {
										"24883CC5FE64ACE9D0DF1893501ECB93C77180F0FF69CCA79AFFB3C316DC8029": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
										"4107E8A8B9E94BF8FF83080DDEC1C0BFFE897EBC2241B89D44F66B3D274088B6": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
										"557E210F7A69A685100A7E4E3D0A7024C546085CEE28910FD17D0B081D9516F": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
										"974D1B4421DA69CC60B481194F0DAD36A5BB4E23DA810DA7A7FB30CDBA178330": "45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
										"BAECC556B46F4ED0F2B4CB599D60785AC8563DD2DC0A5BF12EDEA1C39E5E1FEA": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
										"C953F4879035ED60E766B34720F656AAB5C697B141D924C283124ECEDB91C208": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
										"F8B476F7D28209D77D4A4AC1FE36B9F8259AA1BB6BDDFA6E89DE7E51615CF8A8": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f"
									}
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}, initializes {decimals} with a default value of 18. To select a different value for {decimals}, use {_setupDecimals}. All three of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"libs/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC20.sol\":{\"keccak256\":\"0x8435e8230e900d716b4261cebc91985b70e406e6fd433e9751b46a2f0553401a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0a82e9a70916b84548d3dcad593027da45cbcda310e5b07d3aa56cfa4f97628c\",\"dweb:/ipfs/Qmatc1Bx5fqGNoa9tnDFedThGaLQm69pB8Z7B85uxpacJv\"]},\"libs/Context.sol\":{\"keccak256\":\"0xd3e88da8695a1d63936f7bbf3b3441056c44d167e679a80f9a1b5ffafb11fad9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://587786c556944a0a561b5f5ab16716263b42ca8dd6cc1102b75f4c4d1a802325\",\"dweb:/ipfs/QmU9Y13bBrVy2uE4TiHfPSTFQXV2BeUnxrMo135zRy7wJT\"]},\"libs/ERC20.sol\":{\"keccak256\":\"0xf55ef4bc1ae7b30586abb6e758998a7a177021c7f138557a4537c84205869166\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://866c2f6c4a179de2ed0309040e47145202c7aca27e39b1721eef903c7da4f5c0\",\"dweb:/ipfs/Qme5u17RxYwXP3hHVxtbGiPF9rSki7R1UfE5mv1fe6gHzN\"]},\"libs/SafeMath.sol\":{\"keccak256\":\"0x186349419a02f096ad33a3a314500216b1d683dfff84bb58eb34a9c44adb2082\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a46c1daab5cd0e5bc4276769c07fe3674f2427866535e3139db6bcce62690e9\",\"dweb:/ipfs/QmevHusaMw5EqrmuVMpcgpif3TDatN9XUVdueYuPyVNsap\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 233,
								"contract": "libs/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 239,
								"contract": "libs/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 241,
								"contract": "libs/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 243,
								"contract": "libs/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 245,
								"contract": "libs/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 247,
								"contract": "libs/ERC20.sol:ERC20",
								"label": "_decimals",
								"offset": 0,
								"slot": "5",
								"type": "t_uint8"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"libs/ERC20Permit.sol": {
				"ERC20Permit": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "blockTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "chainID",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "_chainID",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Extension of {ERC20} that allows token holders to use their tokens without sending any transactions by setting {IERC20-allowance} with a signature using the {permit} method, and then spend them via {IERC20-transferFrom}. The {permit} signature mechanism conforms to the {IERC2612Permit} interface.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "See {IERC2612Permit-nonces}."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "See {IERC2612Permit-permit}. If https://eips.ethereum.org/EIPS/eip-1344[ChainID] ever changes, the EIP712 Domain Separator is automatically recalculated."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"blockTimestamp()": "adb61832",
							"chainID()": "adc879e9",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that allows token holders to use their tokens without sending any transactions by setting {IERC20-allowance} with a signature using the {permit} method, and then spend them via {IERC20-transferFrom}. The {permit} signature mechanism conforms to the {IERC2612Permit} interface.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC2612Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC2612Permit-permit}. If https://eips.ethereum.org/EIPS/eip-1344[ChainID] ever changes, the EIP712 Domain Separator is automatically recalculated.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"libs/ERC20Permit.sol\":\"ERC20Permit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC20.sol\":{\"keccak256\":\"0x8435e8230e900d716b4261cebc91985b70e406e6fd433e9751b46a2f0553401a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0a82e9a70916b84548d3dcad593027da45cbcda310e5b07d3aa56cfa4f97628c\",\"dweb:/ipfs/Qmatc1Bx5fqGNoa9tnDFedThGaLQm69pB8Z7B85uxpacJv\"]},\"libs/Context.sol\":{\"keccak256\":\"0xd3e88da8695a1d63936f7bbf3b3441056c44d167e679a80f9a1b5ffafb11fad9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://587786c556944a0a561b5f5ab16716263b42ca8dd6cc1102b75f4c4d1a802325\",\"dweb:/ipfs/QmU9Y13bBrVy2uE4TiHfPSTFQXV2BeUnxrMo135zRy7wJT\"]},\"libs/ECDSA.sol\":{\"keccak256\":\"0x56570b2c4f59242bc83fab31748218d6175a9cc0f9ac91f09f8a73980a44f110\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99419da14149b00e1cfe96aa2216b1c9b0d272841a31615dff4ed0af164bbfc9\",\"dweb:/ipfs/QmZaf31UHP8QYDHkuTgfD4kbHFtweCp657x7fBBV8Ye2aA\"]},\"libs/ERC20.sol\":{\"keccak256\":\"0xf55ef4bc1ae7b30586abb6e758998a7a177021c7f138557a4537c84205869166\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://866c2f6c4a179de2ed0309040e47145202c7aca27e39b1721eef903c7da4f5c0\",\"dweb:/ipfs/Qme5u17RxYwXP3hHVxtbGiPF9rSki7R1UfE5mv1fe6gHzN\"]},\"libs/ERC20Permit.sol\":{\"keccak256\":\"0x9cb2919651ae7d3d70215be22383893802c899692e7a81c2fb16e06a91b82433\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e65e6986d124682867513aefcc601f828780e80da03d67e64b4f16bdd49351d7\",\"dweb:/ipfs/QmVDPPCHT7munjLY3tFD2E36zXXvnuQtHx7Kadn33gGWxN\"]},\"libs/SafeMath.sol\":{\"keccak256\":\"0x186349419a02f096ad33a3a314500216b1d683dfff84bb58eb34a9c44adb2082\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a46c1daab5cd0e5bc4276769c07fe3674f2427866535e3139db6bcce62690e9\",\"dweb:/ipfs/QmevHusaMw5EqrmuVMpcgpif3TDatN9XUVdueYuPyVNsap\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 233,
								"contract": "libs/ERC20Permit.sol:ERC20Permit",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 239,
								"contract": "libs/ERC20Permit.sol:ERC20Permit",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 241,
								"contract": "libs/ERC20Permit.sol:ERC20Permit",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 243,
								"contract": "libs/ERC20Permit.sol:ERC20Permit",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 245,
								"contract": "libs/ERC20Permit.sol:ERC20Permit",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 247,
								"contract": "libs/ERC20Permit.sol:ERC20Permit",
								"label": "_decimals",
								"offset": 0,
								"slot": "5",
								"type": "t_uint8"
							},
							{
								"astId": 730,
								"contract": "libs/ERC20Permit.sol:ERC20Permit",
								"label": "_nonces",
								"offset": 0,
								"slot": "6",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 739,
								"contract": "libs/ERC20Permit.sol:ERC20Permit",
								"label": "_domainSeparators",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_uint256,t_bytes32)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint256,t_bytes32)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => bytes32)",
								"numberOfBytes": "32",
								"value": "t_bytes32"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"libs/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"libs/SafeMath.sol\":630:7224  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"libs/SafeMath.sol\":630:7224  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212208b48da3450cdbdbd666cb169689f014c311d63ccb134bd5b67afa8291fdc5fca64736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208b48da3450cdbdbd666cb169689f014c311d63ccb134bd5b67afa8291fdc5fca64736f6c634300060c0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 0x48 0xDA CALLVALUE POP 0xCD 0xBD 0xBD PUSH7 0x6CB169689F014C BALANCE SAR PUSH4 0xCCB134BD JUMPDEST PUSH8 0xAFA8291FDC5FCA64 PUSH20 0x6F6C634300060C00330000000000000000000000 ",
							"sourceMap": "630:6594:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208b48da3450cdbdbd666cb169689f014c311d63ccb134bd5b67afa8291fdc5fca64736f6c634300060c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP12 0x48 0xDA CALLVALUE POP 0xCD 0xBD 0xBD PUSH7 0x6CB169689F014C BALANCE SAR PUSH4 0xCCB134BD JUMPDEST PUSH8 0xAFA8291FDC5FCA64 PUSH20 0x6F6C634300060C00330000000000000000000000 ",
							"sourceMap": "630:6594:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "INVALID",
									"source": 5
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212208b48da3450cdbdbd666cb169689f014c311d63ccb134bd5b67afa8291fdc5fca64736f6c634300060c0033",
									".code": [
										{
											"begin": 630,
											"end": 7224,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"libs/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"libs/SafeMath.sol\":{\"keccak256\":\"0x186349419a02f096ad33a3a314500216b1d683dfff84bb58eb34a9c44adb2082\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a46c1daab5cd0e5bc4276769c07fe3674f2427866535e3139db6bcce62690e9\",\"dweb:/ipfs/QmevHusaMw5EqrmuVMpcgpif3TDatN9XUVdueYuPyVNsap\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "2018",
				"formattedMessage": "libs/ERC20Permit.sol:97:3: Warning: Function state mutability can be restricted to pure\n  function chainID() public view virtual returns (uint256 _chainID) {\n  ^ (Relevant source part starts here and spans across multiple lines).\n",
				"message": "Function state mutability can be restricted to pure",
				"severity": "warning",
				"sourceLocation": {
					"end": 2973,
					"file": "libs/ERC20Permit.sol",
					"start": 2853
				},
				"type": "Warning"
			}
		],
		"sources": {
			"interfaces/IERC20.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							77
						]
					},
					"id": 78,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "66:70:0",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 77,
							"linearizedBaseContracts": [
								77
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": null,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "160:66:0",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 8,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 4,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "251:2:0"
									},
									"returnParameters": {
										"id": 7,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 6,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 8,
												"src": "277:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 5,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "277:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "276:9:0"
									},
									"scope": 77,
									"src": "231:55:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": {
										"id": 9,
										"nodeType": "StructuredDocumentation",
										"src": "292:72:0",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 16,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 16,
												"src": "388:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "388:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "387:17:0"
									},
									"returnParameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 16,
												"src": "428:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 13,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "428:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "427:9:0"
									},
									"scope": 77,
									"src": "369:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "443:209:0",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 26,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 26,
												"src": "675:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 18,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "675:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 21,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 26,
												"src": "694:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 20,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "694:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "674:35:0"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 26,
												"src": "728:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 23,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "728:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "727:6:0"
									},
									"scope": 77,
									"src": "657:77:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "740:264:0",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 36,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 36,
												"src": "1028:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1028:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 31,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 36,
												"src": "1043:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 30,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1043:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1027:32:0"
									},
									"returnParameters": {
										"id": 35,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 34,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 36,
												"src": "1083:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 33,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1083:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1082:9:0"
									},
									"scope": 77,
									"src": "1009:83:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": {
										"id": 37,
										"nodeType": "StructuredDocumentation",
										"src": "1098:642:0",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 46,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 46,
												"src": "1762:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 38,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1762:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 41,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 46,
												"src": "1779:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 40,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1779:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1761:33:0"
									},
									"returnParameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 44,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 46,
												"src": "1813:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 43,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1813:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1812:6:0"
									},
									"scope": 77,
									"src": "1745:74:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1825:296:0",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 58,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 54,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 58,
												"src": "2148:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2148:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 58,
												"src": "2164:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 50,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2164:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 58,
												"src": "2183:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 52,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2183:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2147:51:0"
									},
									"returnParameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 56,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 58,
												"src": "2217:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 55,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2217:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2216:6:0"
									},
									"scope": 77,
									"src": "2126:97:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "2229:158:0",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 67,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 61,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 67,
												"src": "2407:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 60,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2407:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 63,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 67,
												"src": "2429:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2429:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 65,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 67,
												"src": "2449:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 64,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2449:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2406:57:0"
									},
									"src": "2392:72:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "2470:148:0",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 76,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 70,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 76,
												"src": "2638:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 69,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2638:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 72,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 76,
												"src": "2661:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 71,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2661:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 74,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 76,
												"src": "2686:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 73,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2686:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2637:63:0"
									},
									"src": "2623:78:0"
								}
							],
							"scope": 78,
							"src": "137:2566:0"
						}
					],
					"src": "33:2670:0"
				},
				"id": 0
			},
			"libs/Context.sol": {
				"ast": {
					"absolutePath": "libs/Context.sol",
					"exportedSymbols": {
						"Context": [
							100
						]
					},
					"id": 101,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 79,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 100,
							"linearizedBaseContracts": [
								100
							],
							"name": "Context",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 87,
										"nodeType": "Block",
										"src": "668:34:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 84,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "685:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 85,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "685:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"functionReturnParameters": 83,
												"id": 86,
												"nodeType": "Return",
												"src": "678:17:1"
											}
										]
									},
									"documentation": null,
									"id": 88,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "617:2:1"
									},
									"returnParameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 88,
												"src": "651:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 81,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "651:15:1",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "650:17:1"
									},
									"scope": 100,
									"src": "598:104:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 98,
										"nodeType": "Block",
										"src": "773:165:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 93,
													"name": "this",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": -28,
													"src": "783:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_Context_$100",
														"typeString": "contract Context"
													}
												},
												"id": 94,
												"nodeType": "ExpressionStatement",
												"src": "783:4:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 95,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "923:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 96,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "923:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 92,
												"id": 97,
												"nodeType": "Return",
												"src": "916:15:1"
											}
										]
									},
									"documentation": null,
									"id": 99,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "725:2:1"
									},
									"returnParameters": {
										"id": 92,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 99,
												"src": "759:12:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 90,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "759:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "758:14:1"
									},
									"scope": 100,
									"src": "708:230:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 101,
							"src": "566:374:1"
						}
					],
					"src": "33:907:1"
				},
				"id": 1
			},
			"libs/ECDSA.sol": {
				"ast": {
					"absolutePath": "libs/ECDSA.sol",
					"exportedSymbols": {
						"ECDSA": [
							216
						]
					},
					"id": 217,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 102,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 103,
								"nodeType": "StructuredDocumentation",
								"src": "145:205:2",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 216,
							"linearizedBaseContracts": [
								216
							],
							"name": "ECDSA",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 140,
										"nodeType": "Block",
										"src": "1208:566:2",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 116,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 113,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 108,
															"src": "1252:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 114,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "1252:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "3635",
														"id": 115,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1272:2:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "1252:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 122,
												"nodeType": "IfStatement",
												"src": "1248:84:2",
												"trueBody": {
													"id": 121,
													"nodeType": "Block",
													"src": "1276:56:2",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
																		"id": 118,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1291:33:2",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
																			"typeString": "literal_string \"ECDSA: invalid signature length\""
																		},
																		"value": "ECDSA: invalid signature length"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
																			"typeString": "literal_string \"ECDSA: invalid signature length\""
																		}
																	],
																	"id": 117,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		-19,
																		-19
																	],
																	"referencedDeclaration": -19,
																	"src": "1284:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 119,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1284:41:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 120,
															"nodeType": "ExpressionStatement",
															"src": "1284:41:2"
														}
													]
												}
											},
											{
												"assignments": [
													124
												],
												"declarations": [
													{
														"constant": false,
														"id": 124,
														"mutability": "mutable",
														"name": "r",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 140,
														"src": "1390:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 123,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1390:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 125,
												"initialValue": null,
												"nodeType": "VariableDeclarationStatement",
												"src": "1390:9:2"
											},
											{
												"assignments": [
													127
												],
												"declarations": [
													{
														"constant": false,
														"id": 127,
														"mutability": "mutable",
														"name": "s",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 140,
														"src": "1405:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 126,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1405:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 128,
												"initialValue": null,
												"nodeType": "VariableDeclarationStatement",
												"src": "1405:9:2"
											},
											{
												"assignments": [
													130
												],
												"declarations": [
													{
														"constant": false,
														"id": 130,
														"mutability": "mutable",
														"name": "v",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 140,
														"src": "1420:7:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 129,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "1420:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 131,
												"initialValue": null,
												"nodeType": "VariableDeclarationStatement",
												"src": "1420:7:2"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1610:124:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1618:32:2",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "signature",
																				"nodeType": "YulIdentifier",
																				"src": "1633:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1644:4:2",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1629:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1629:20:2"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1623:5:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1623:27:2"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "1618:1:2"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1657:32:2",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "signature",
																				"nodeType": "YulIdentifier",
																				"src": "1672:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1683:4:2",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1668:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1668:20:2"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1662:5:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1662:27:2"
															},
															"variableNames": [
																{
																	"name": "s",
																	"nodeType": "YulIdentifier",
																	"src": "1657:1:2"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1696:32:2",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "signature",
																				"nodeType": "YulIdentifier",
																				"src": "1711:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1722:4:2",
																				"type": "",
																				"value": "0x41"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1707:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1707:20:2"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1701:5:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1701:27:2"
															},
															"variableNames": [
																{
																	"name": "v",
																	"nodeType": "YulIdentifier",
																	"src": "1696:1:2"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 124,
														"isOffset": false,
														"isSlot": false,
														"src": "1618:1:2",
														"valueSize": 1
													},
													{
														"declaration": 127,
														"isOffset": false,
														"isSlot": false,
														"src": "1657:1:2",
														"valueSize": 1
													},
													{
														"declaration": 108,
														"isOffset": false,
														"isSlot": false,
														"src": "1633:9:2",
														"valueSize": 1
													},
													{
														"declaration": 108,
														"isOffset": false,
														"isSlot": false,
														"src": "1672:9:2",
														"valueSize": 1
													},
													{
														"declaration": 108,
														"isOffset": false,
														"isSlot": false,
														"src": "1711:9:2",
														"valueSize": 1
													},
													{
														"declaration": 130,
														"isOffset": false,
														"isSlot": false,
														"src": "1696:1:2",
														"valueSize": 1
													}
												],
												"id": 132,
												"nodeType": "InlineAssembly",
												"src": "1601:133:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 134,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 106,
															"src": "1755:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"argumentTypes": null,
															"id": 135,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 130,
															"src": "1761:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"argumentTypes": null,
															"id": 136,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 124,
															"src": "1764:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"argumentTypes": null,
															"id": 137,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 127,
															"src": "1767:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 133,
														"name": "recover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															141,
															198
														],
														"referencedDeclaration": 198,
														"src": "1747:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1747:22:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 112,
												"id": 139,
												"nodeType": "Return",
												"src": "1740:29:2"
											}
										]
									},
									"documentation": {
										"id": 104,
										"nodeType": "StructuredDocumentation",
										"src": "369:749:2",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."
									},
									"id": 141,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 106,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 141,
												"src": "1138:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 105,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1138:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 108,
												"mutability": "mutable",
												"name": "signature",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 141,
												"src": "1152:22:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 107,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1152:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1137:38:2"
									},
									"returnParameters": {
										"id": 112,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 111,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 141,
												"src": "1199:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 110,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1199:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1198:9:2"
									},
									"scope": 216,
									"src": "1121:653:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 197,
										"nodeType": "Block",
										"src": "2026:1258:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 161,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 158,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 150,
																		"src": "2886:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 157,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2878:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 156,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2878:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 159,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2878:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
																"id": 160,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2892:66:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...7168"
																},
																"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
															},
															"src": "2878:80:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c7565",
															"id": 162,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2960:36:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
																"typeString": "literal_string \"ECDSA: invalid signature 's' value\""
															},
															"value": "ECDSA: invalid signature 's' value"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
																"typeString": "literal_string \"ECDSA: invalid signature 's' value\""
															}
														],
														"id": 155,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2870:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 163,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2870:127:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 164,
												"nodeType": "ExpressionStatement",
												"src": "2870:127:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 172,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 168,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 166,
																	"name": "v",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 146,
																	"src": "3011:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "3237",
																	"id": 167,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3016:2:2",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_27_by_1",
																		"typeString": "int_const 27"
																	},
																	"value": "27"
																},
																"src": "3011:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 171,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 169,
																	"name": "v",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 146,
																	"src": "3022:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "3238",
																	"id": 170,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3027:2:2",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_28_by_1",
																		"typeString": "int_const 28"
																	},
																	"value": "28"
																},
																"src": "3022:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "3011:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "45434453413a20696e76616c6964207369676e6174757265202776272076616c7565",
															"id": 173,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3031:36:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4",
																"typeString": "literal_string \"ECDSA: invalid signature 'v' value\""
															},
															"value": "ECDSA: invalid signature 'v' value"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4",
																"typeString": "literal_string \"ECDSA: invalid signature 'v' value\""
															}
														],
														"id": 165,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "3003:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 174,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3003:65:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 175,
												"nodeType": "ExpressionStatement",
												"src": "3003:65:2"
											},
											{
												"assignments": [
													177
												],
												"declarations": [
													{
														"constant": false,
														"id": 177,
														"mutability": "mutable",
														"name": "signer",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 197,
														"src": "3155:14:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 176,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3155:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 184,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 179,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 144,
															"src": "3182:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"argumentTypes": null,
															"id": 180,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 146,
															"src": "3188:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"argumentTypes": null,
															"id": 181,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 148,
															"src": "3191:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"argumentTypes": null,
															"id": 182,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 150,
															"src": "3194:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 178,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -6,
														"src": "3172:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 183,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3172:24:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3155:41:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 191,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 186,
																"name": "signer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 177,
																"src": "3210:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 189,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3228:1:2",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 188,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3220:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 187,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3220:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 190,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3220:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "3210:20:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "45434453413a20696e76616c6964207369676e6174757265",
															"id": 192,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3232:26:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
																"typeString": "literal_string \"ECDSA: invalid signature\""
															},
															"value": "ECDSA: invalid signature"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
																"typeString": "literal_string \"ECDSA: invalid signature\""
															}
														],
														"id": 185,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "3202:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 193,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3202:57:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 194,
												"nodeType": "ExpressionStatement",
												"src": "3202:57:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 195,
													"name": "signer",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 177,
													"src": "3273:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 154,
												"id": 196,
												"nodeType": "Return",
												"src": "3266:13:2"
											}
										]
									},
									"documentation": {
										"id": 142,
										"nodeType": "StructuredDocumentation",
										"src": "1778:131:2",
										"text": " @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 198,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 144,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 198,
												"src": "1934:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 143,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1934:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 146,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 198,
												"src": "1952:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 145,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1952:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 148,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 198,
												"src": "1965:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 147,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1965:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 198,
												"src": "1980:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 149,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1980:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1928:65:2"
									},
									"returnParameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 198,
												"src": "2017:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2017:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2016:9:2"
									},
									"scope": 216,
									"src": "1912:1372:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 214,
										"nodeType": "Block",
										"src": "3608:173:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
																	"id": 209,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3734:34:2",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73",
																		"typeString": "literal_string \"\u0019Ethereum Signed Message:\n32\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n32"
																},
																{
																	"argumentTypes": null,
																	"id": 210,
																	"name": "hash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 201,
																	"src": "3770:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73",
																		"typeString": "literal_string \"\u0019Ethereum Signed Message:\n32\""
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 207,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "3717:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 208,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "3717:16:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 211,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3717:58:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 206,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -8,
														"src": "3707:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3707:69:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 205,
												"id": 213,
												"nodeType": "Return",
												"src": "3700:76:2"
											}
										]
									},
									"documentation": {
										"id": 199,
										"nodeType": "StructuredDocumentation",
										"src": "3288:239:2",
										"text": " @dev Returns an Ethereum Signed Message, created from a `hash`. This\n replicates the behavior of the\n https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n JSON-RPC method.\n See {recover}."
									},
									"id": 215,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "hash",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 215,
												"src": "3562:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 200,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3562:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3561:14:2"
									},
									"returnParameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 215,
												"src": "3599:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 203,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3599:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3598:9:2"
									},
									"scope": 216,
									"src": "3530:251:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 217,
							"src": "351:3432:2"
						}
					],
					"src": "33:3750:2"
				},
				"id": 2
			},
			"libs/ERC20.sol": {
				"ast": {
					"absolutePath": "libs/ERC20.sol",
					"exportedSymbols": {
						"ERC20": [
							719
						]
					},
					"id": 720,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 218,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:3"
						},
						{
							"absolutePath": "libs/Context.sol",
							"file": "./Context.sol",
							"id": 219,
							"nodeType": "ImportDirective",
							"scope": 720,
							"sourceUnit": 101,
							"src": "66:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/IERC20.sol",
							"file": "../interfaces/IERC20.sol",
							"id": 220,
							"nodeType": "ImportDirective",
							"scope": 720,
							"sourceUnit": 78,
							"src": "90:34:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "libs/SafeMath.sol",
							"file": "./SafeMath.sol",
							"id": 221,
							"nodeType": "ImportDirective",
							"scope": 720,
							"sourceUnit": 1290,
							"src": "125:24:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 223,
										"name": "Context",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 100,
										"src": "1332:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Context_$100",
											"typeString": "contract Context"
										}
									},
									"id": 224,
									"nodeType": "InheritanceSpecifier",
									"src": "1332:7:3"
								},
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 225,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 77,
										"src": "1341:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$77",
											"typeString": "contract IERC20"
										}
									},
									"id": 226,
									"nodeType": "InheritanceSpecifier",
									"src": "1341:6:3"
								}
							],
							"contractDependencies": [
								77,
								100
							],
							"contractKind": "contract",
							"documentation": {
								"id": 222,
								"nodeType": "StructuredDocumentation",
								"src": "151:1162:3",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin guidelines: functions revert instead\n of returning `false` on failure. This behavior is nonetheless conventional\n and does not conflict with the expectations of ERC20 applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 719,
							"linearizedBaseContracts": [
								719,
								77,
								100
							],
							"name": "ERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 229,
									"libraryName": {
										"contractScope": null,
										"id": 227,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1289,
										"src": "1360:8:3",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$1289",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "1354:27:3",
									"typeName": {
										"id": 228,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1373:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 233,
									"mutability": "mutable",
									"name": "_balances",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 719,
									"src": "1387:46:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 232,
										"keyType": {
											"id": 230,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1396:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1387:28:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 231,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1407:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 239,
									"mutability": "mutable",
									"name": "_allowances",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 719,
									"src": "1440:69:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 238,
										"keyType": {
											"id": 234,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1449:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1440:49:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 237,
											"keyType": {
												"id": 235,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1469:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1460:28:3",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 236,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1480:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 241,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 719,
									"src": "1516:28:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 240,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1516:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 243,
									"mutability": "mutable",
									"name": "_name",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 719,
									"src": "1551:20:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 242,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1551:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 245,
									"mutability": "mutable",
									"name": "_symbol",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 719,
									"src": "1577:22:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 244,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1577:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 247,
									"mutability": "mutable",
									"name": "_decimals",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 719,
									"src": "1605:23:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 246,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "1605:5:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 267,
										"nodeType": "Block",
										"src": "2015:81:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 257,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 255,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 243,
														"src": "2025:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 256,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 250,
														"src": "2033:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2025:13:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 258,
												"nodeType": "ExpressionStatement",
												"src": "2025:13:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 261,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 259,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 245,
														"src": "2048:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 260,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 252,
														"src": "2058:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2048:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 262,
												"nodeType": "ExpressionStatement",
												"src": "2048:17:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 265,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 263,
														"name": "_decimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 247,
														"src": "2075:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "3138",
														"id": 264,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2087:2:3",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_18_by_1",
															"typeString": "int_const 18"
														},
														"value": "18"
													},
													"src": "2075:14:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 266,
												"nodeType": "ExpressionStatement",
												"src": "2075:14:3"
											}
										]
									},
									"documentation": {
										"id": 248,
										"nodeType": "StructuredDocumentation",
										"src": "1635:311:3",
										"text": " @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n a default value of 18.\n To select a different value for {decimals}, use {_setupDecimals}.\n All three of these values are immutable: they can only be set once during\n construction."
									},
									"id": 268,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 250,
												"mutability": "mutable",
												"name": "name_",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 268,
												"src": "1964:19:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 249,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1964:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "symbol_",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 268,
												"src": "1985:21:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 251,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1985:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1963:44:3"
									},
									"returnParameters": {
										"id": 254,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2015:0:3"
									},
									"scope": 719,
									"src": "1951:145:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 276,
										"nodeType": "Block",
										"src": "2221:29:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 274,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 243,
													"src": "2238:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 273,
												"id": 275,
												"nodeType": "Return",
												"src": "2231:12:3"
											}
										]
									},
									"documentation": {
										"id": 269,
										"nodeType": "StructuredDocumentation",
										"src": "2102:54:3",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 277,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2174:2:3"
									},
									"returnParameters": {
										"id": 273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 277,
												"src": "2206:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 271,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2206:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2205:15:3"
									},
									"scope": 719,
									"src": "2161:89:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 285,
										"nodeType": "Block",
										"src": "2425:31:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 283,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 245,
													"src": "2442:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 282,
												"id": 284,
												"nodeType": "Return",
												"src": "2435:14:3"
											}
										]
									},
									"documentation": {
										"id": 278,
										"nodeType": "StructuredDocumentation",
										"src": "2256:102:3",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 286,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 279,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2378:2:3"
									},
									"returnParameters": {
										"id": 282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 281,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 286,
												"src": "2410:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 280,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2410:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2409:15:3"
									},
									"scope": 719,
									"src": "2363:93:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 294,
										"nodeType": "Block",
										"src": "3135:33:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 292,
													"name": "_decimals",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 247,
													"src": "3152:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 291,
												"id": 293,
												"nodeType": "Return",
												"src": "3145:16:3"
											}
										]
									},
									"documentation": {
										"id": 287,
										"nodeType": "StructuredDocumentation",
										"src": "2462:612:3",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5,05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n called.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 295,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 288,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3096:2:3"
									},
									"returnParameters": {
										"id": 291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 295,
												"src": "3128:5:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 289,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3128:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3127:7:3"
									},
									"scope": 719,
									"src": "3079:89:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										8
									],
									"body": {
										"id": 304,
										"nodeType": "Block",
										"src": "3298:36:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 302,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 241,
													"src": "3315:12:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 301,
												"id": 303,
												"nodeType": "Return",
												"src": "3308:19:3"
											}
										]
									},
									"documentation": {
										"id": 296,
										"nodeType": "StructuredDocumentation",
										"src": "3174:49:3",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 305,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 298,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3271:8:3"
									},
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3248:2:3"
									},
									"returnParameters": {
										"id": 301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 305,
												"src": "3289:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 299,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3289:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3288:9:3"
									},
									"scope": 719,
									"src": "3228:106:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										16
									],
									"body": {
										"id": 318,
										"nodeType": "Block",
										"src": "3475:42:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 314,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 233,
														"src": "3492:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 316,
													"indexExpression": {
														"argumentTypes": null,
														"id": 315,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 308,
														"src": "3502:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3492:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 313,
												"id": 317,
												"nodeType": "Return",
												"src": "3485:25:3"
											}
										]
									},
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "3340:47:3",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 319,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 310,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3448:8:3"
									},
									"parameters": {
										"id": 309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 308,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 319,
												"src": "3411:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 307,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3411:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3410:17:3"
									},
									"returnParameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 319,
												"src": "3466:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 311,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3466:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3465:9:3"
									},
									"scope": 719,
									"src": "3392:125:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										26
									],
									"body": {
										"id": 339,
										"nodeType": "Block",
										"src": "3812:80:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 331,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 88,
																"src": "3832:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 332,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3832:12:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 333,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 322,
															"src": "3846:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 334,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 324,
															"src": "3857:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 330,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 540,
														"src": "3822:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 335,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3822:42:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 336,
												"nodeType": "ExpressionStatement",
												"src": "3822:42:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"hexValue": "74727565",
													"id": 337,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3881:4:3",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 329,
												"id": 338,
												"nodeType": "Return",
												"src": "3874:11:3"
											}
										]
									},
									"documentation": {
										"id": 320,
										"nodeType": "StructuredDocumentation",
										"src": "3523:192:3",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `recipient` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 340,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 326,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3788:8:3"
									},
									"parameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 340,
												"src": "3738:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 321,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3738:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 324,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 340,
												"src": "3757:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 323,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3757:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3737:35:3"
									},
									"returnParameters": {
										"id": 329,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 328,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 340,
												"src": "3806:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 327,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3806:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3805:6:3"
									},
									"scope": 719,
									"src": "3720:172:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										36
									],
									"body": {
										"id": 357,
										"nodeType": "Block",
										"src": "4048:51:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 351,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 239,
															"src": "4065:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 353,
														"indexExpression": {
															"argumentTypes": null,
															"id": 352,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 343,
															"src": "4077:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4065:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 355,
													"indexExpression": {
														"argumentTypes": null,
														"id": 354,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 345,
														"src": "4084:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4065:27:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 350,
												"id": 356,
												"nodeType": "Return",
												"src": "4058:34:3"
											}
										]
									},
									"documentation": {
										"id": 341,
										"nodeType": "StructuredDocumentation",
										"src": "3898:47:3",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 358,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 347,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4021:8:3"
									},
									"parameters": {
										"id": 346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 343,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 358,
												"src": "3969:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 342,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3969:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 345,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 358,
												"src": "3984:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 344,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3984:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3968:32:3"
									},
									"returnParameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 358,
												"src": "4039:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 348,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4039:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4038:9:3"
									},
									"scope": 719,
									"src": "3950:149:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										46
									],
									"body": {
										"id": 378,
										"nodeType": "Block",
										"src": "4326:77:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 370,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 88,
																"src": "4345:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 371,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4345:12:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 372,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 361,
															"src": "4359:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 373,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 363,
															"src": "4368:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 369,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 696,
														"src": "4336:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4336:39:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 375,
												"nodeType": "ExpressionStatement",
												"src": "4336:39:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"hexValue": "74727565",
													"id": 376,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4392:4:3",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 368,
												"id": 377,
												"nodeType": "Return",
												"src": "4385:11:3"
											}
										]
									},
									"documentation": {
										"id": 359,
										"nodeType": "StructuredDocumentation",
										"src": "4105:127:3",
										"text": " @dev See {IERC20-approve}.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 379,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 365,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4302:8:3"
									},
									"parameters": {
										"id": 364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 379,
												"src": "4254:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 360,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4254:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 363,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 379,
												"src": "4271:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 362,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4271:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4253:33:3"
									},
									"returnParameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 367,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 379,
												"src": "4320:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 366,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4320:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4319:6:3"
									},
									"scope": 719,
									"src": "4237:166:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										58
									],
									"body": {
										"id": 416,
										"nodeType": "Block",
										"src": "4982:205:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 393,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 382,
															"src": "5002:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 394,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 384,
															"src": "5010:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 395,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 386,
															"src": "5021:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 392,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 540,
														"src": "4992:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 396,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4992:36:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 397,
												"nodeType": "ExpressionStatement",
												"src": "4992:36:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 399,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 382,
															"src": "5047:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 400,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 88,
																"src": "5055:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 401,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5055:12:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 409,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 386,
																	"src": "5107:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"argumentTypes": null,
																	"hexValue": "45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
																	"id": 410,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5115:42:3",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
																		"typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
																	},
																	"value": "ERC20: transfer amount exceeds allowance"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
																		"typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 402,
																			"name": "_allowances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 239,
																			"src": "5069:11:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(address => uint256))"
																			}
																		},
																		"id": 404,
																		"indexExpression": {
																			"argumentTypes": null,
																			"id": 403,
																			"name": "sender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 382,
																			"src": "5081:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5069:19:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 407,
																	"indexExpression": {
																		"argumentTypes": null,
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 405,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 88,
																			"src": "5089:10:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																				"typeString": "function () view returns (address payable)"
																			}
																		},
																		"id": 406,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5089:12:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5069:33:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 408,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1240,
																"src": "5069:37:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
																}
															},
															"id": 411,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5069:89:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 398,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 696,
														"src": "5038:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 412,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5038:121:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 413,
												"nodeType": "ExpressionStatement",
												"src": "5038:121:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"hexValue": "74727565",
													"id": 414,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5176:4:3",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 391,
												"id": 415,
												"nodeType": "Return",
												"src": "5169:11:3"
											}
										]
									},
									"documentation": {
										"id": 380,
										"nodeType": "StructuredDocumentation",
										"src": "4409:456:3",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n Requirements:\n - `sender` and `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`.\n - the caller must have allowance for ``sender``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 417,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 388,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4958:8:3"
									},
									"parameters": {
										"id": 387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 382,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 417,
												"src": "4892:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 381,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4892:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 384,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 417,
												"src": "4908:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 383,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4908:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 417,
												"src": "4927:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 385,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4927:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4891:51:3"
									},
									"returnParameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 417,
												"src": "4976:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 389,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4976:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4975:6:3"
									},
									"scope": 719,
									"src": "4870:317:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 444,
										"nodeType": "Block",
										"src": "5676:121:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 428,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 88,
																"src": "5695:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 429,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5695:12:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 430,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 420,
															"src": "5709:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 438,
																	"name": "addedValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 422,
																	"src": "5757:10:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 431,
																			"name": "_allowances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 239,
																			"src": "5718:11:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(address => uint256))"
																			}
																		},
																		"id": 434,
																		"indexExpression": {
																			"argumentTypes": null,
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 432,
																				"name": "_msgSender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 88,
																				"src": "5730:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																					"typeString": "function () view returns (address payable)"
																				}
																			},
																			"id": 433,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5730:12:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5718:25:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 436,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 435,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 420,
																		"src": "5744:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5718:34:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 437,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "add",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1116,
																"src": "5718:38:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 439,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5718:50:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 427,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 696,
														"src": "5686:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 440,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5686:83:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 441,
												"nodeType": "ExpressionStatement",
												"src": "5686:83:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"hexValue": "74727565",
													"id": 442,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5786:4:3",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 426,
												"id": 443,
												"nodeType": "Return",
												"src": "5779:11:3"
											}
										]
									},
									"documentation": {
										"id": 418,
										"nodeType": "StructuredDocumentation",
										"src": "5193:384:3",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 420,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 445,
												"src": "5609:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 419,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5609:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 422,
												"mutability": "mutable",
												"name": "addedValue",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 445,
												"src": "5626:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 421,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5626:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5608:37:3"
									},
									"returnParameters": {
										"id": 426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 445,
												"src": "5670:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 424,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5670:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5669:6:3"
									},
									"scope": 719,
									"src": "5582:215:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 473,
										"nodeType": "Block",
										"src": "6383:167:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 456,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 88,
																"src": "6402:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 457,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6402:12:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 458,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 448,
															"src": "6416:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 466,
																	"name": "subtractedValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 450,
																	"src": "6464:15:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"argumentTypes": null,
																	"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 467,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6481:39:3",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																		"typeString": "literal_string \"ERC20: decreased allowance below zero\""
																	},
																	"value": "ERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																		"typeString": "literal_string \"ERC20: decreased allowance below zero\""
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 459,
																			"name": "_allowances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 239,
																			"src": "6425:11:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(address => uint256))"
																			}
																		},
																		"id": 462,
																		"indexExpression": {
																			"argumentTypes": null,
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 460,
																				"name": "_msgSender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 88,
																				"src": "6437:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																					"typeString": "function () view returns (address payable)"
																				}
																			},
																			"id": 461,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6437:12:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6425:25:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 464,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 463,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 448,
																		"src": "6451:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6425:34:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 465,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1240,
																"src": "6425:38:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
																}
															},
															"id": 468,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6425:96:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 455,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 696,
														"src": "6393:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 469,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6393:129:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 470,
												"nodeType": "ExpressionStatement",
												"src": "6393:129:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"hexValue": "74727565",
													"id": 471,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6539:4:3",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 454,
												"id": 472,
												"nodeType": "Return",
												"src": "6532:11:3"
											}
										]
									},
									"documentation": {
										"id": 446,
										"nodeType": "StructuredDocumentation",
										"src": "5803:476:3",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 474,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 451,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 448,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 474,
												"src": "6311:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 447,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6311:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 450,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 474,
												"src": "6328:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 449,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6328:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6310:42:3"
									},
									"returnParameters": {
										"id": 454,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 453,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 474,
												"src": "6377:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 452,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6377:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6376:6:3"
									},
									"scope": 719,
									"src": "6284:266:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 539,
										"nodeType": "Block",
										"src": "7111:443:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 490,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 485,
																"name": "sender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 477,
																"src": "7129:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 488,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7147:1:3",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 487,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7139:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 486,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7139:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 489,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7139:10:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "7129:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 491,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7151:39:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 484,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "7121:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 492,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7121:70:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 493,
												"nodeType": "ExpressionStatement",
												"src": "7121:70:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 500,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 495,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 479,
																"src": "7209:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 498,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7230:1:3",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 497,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7222:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 496,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7222:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 499,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7222:10:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "7209:23:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 501,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7234:37:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 494,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "7201:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 502,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7201:71:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 503,
												"nodeType": "ExpressionStatement",
												"src": "7201:71:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 505,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "7304:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 506,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "7312:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 507,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 481,
															"src": "7323:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 504,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 718,
														"src": "7283:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 508,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7283:47:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 509,
												"nodeType": "ExpressionStatement",
												"src": "7283:47:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 520,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 510,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 233,
															"src": "7341:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 512,
														"indexExpression": {
															"argumentTypes": null,
															"id": 511,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "7351:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7341:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 517,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 481,
																"src": "7383:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"argumentTypes": null,
																"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
																"id": 518,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7391:40:3",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																	"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
																},
																"value": "ERC20: transfer amount exceeds balance"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																	"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 513,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 233,
																	"src": "7361:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 515,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 514,
																	"name": "sender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 477,
																	"src": "7371:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7361:17:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 516,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1240,
															"src": "7361:21:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
															}
														},
														"id": 519,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7361:71:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7341:91:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 521,
												"nodeType": "ExpressionStatement",
												"src": "7341:91:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 531,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 522,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 233,
															"src": "7442:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 524,
														"indexExpression": {
															"argumentTypes": null,
															"id": 523,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "7452:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7442:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 529,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 481,
																"src": "7490:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 525,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 233,
																	"src": "7465:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 527,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 526,
																	"name": "recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 479,
																	"src": "7475:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7465:20:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 528,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1116,
															"src": "7465:24:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 530,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7465:32:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7442:55:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 532,
												"nodeType": "ExpressionStatement",
												"src": "7442:55:3"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 534,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "7521:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 535,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "7529:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 536,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 481,
															"src": "7540:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 533,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 67,
														"src": "7512:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 537,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7512:35:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 538,
												"nodeType": "EmitStatement",
												"src": "7507:40:3"
											}
										]
									},
									"documentation": {
										"id": 475,
										"nodeType": "StructuredDocumentation",
										"src": "6556:463:3",
										"text": " @dev Moves tokens `amount` from `sender` to `recipient`.\n This is internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `sender` cannot be the zero address.\n - `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`."
									},
									"id": 540,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 540,
												"src": "7043:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 476,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7043:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 540,
												"src": "7059:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 478,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7059:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 540,
												"src": "7078:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 480,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7078:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7042:51:3"
									},
									"returnParameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7111:0:3"
									},
									"scope": 719,
									"src": "7024:530:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 594,
										"nodeType": "Block",
										"src": "7890:305:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 554,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 549,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 543,
																"src": "7908:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 552,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7927:1:3",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 551,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7919:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 550,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7919:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 553,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7919:10:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "7908:21:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 555,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7931:33:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 548,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "7900:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 556,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7900:65:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 557,
												"nodeType": "ExpressionStatement",
												"src": "7900:65:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 561,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8005:1:3",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 560,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7997:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 559,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7997:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 562,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7997:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 563,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 543,
															"src": "8009:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 564,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 545,
															"src": "8018:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 558,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 718,
														"src": "7976:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 565,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7976:49:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 566,
												"nodeType": "ExpressionStatement",
												"src": "7976:49:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 572,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 567,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 241,
														"src": "8036:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 570,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 545,
																"src": "8068:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 568,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 241,
																"src": "8051:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 569,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1116,
															"src": "8051:16:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 571,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8051:24:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8036:39:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 573,
												"nodeType": "ExpressionStatement",
												"src": "8036:39:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 583,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 574,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 233,
															"src": "8085:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 576,
														"indexExpression": {
															"argumentTypes": null,
															"id": 575,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 543,
															"src": "8095:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8085:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 581,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 545,
																"src": "8129:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 577,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 233,
																	"src": "8106:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 579,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 578,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 543,
																	"src": "8116:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "8106:18:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 580,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1116,
															"src": "8106:22:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 582,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8106:30:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8085:51:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 584,
												"nodeType": "ExpressionStatement",
												"src": "8085:51:3"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 588,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8168:1:3",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 587,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8160:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 586,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8160:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 589,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8160:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 590,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 543,
															"src": "8172:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 591,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 545,
															"src": "8181:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 585,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 67,
														"src": "8151:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 592,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8151:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 593,
												"nodeType": "EmitStatement",
												"src": "8146:42:3"
											}
										]
									},
									"documentation": {
										"id": 541,
										"nodeType": "StructuredDocumentation",
										"src": "7560:260:3",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `to` cannot be the zero address."
									},
									"id": 595,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 546,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 543,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 595,
												"src": "7840:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 542,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7840:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 545,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 595,
												"src": "7857:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 544,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7857:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7839:33:3"
									},
									"returnParameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7890:0:3"
									},
									"scope": 719,
									"src": "7825:370:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 650,
										"nodeType": "Block",
										"src": "8580:345:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 609,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 604,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 598,
																"src": "8598:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 607,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8617:1:3",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 606,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8609:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 605,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8609:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 608,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8609:10:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "8598:21:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 610,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8621:35:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 603,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "8590:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 611,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8590:67:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 612,
												"nodeType": "ExpressionStatement",
												"src": "8590:67:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 614,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 598,
															"src": "8689:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 617,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8706:1:3",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 616,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8698:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 615,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8698:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 618,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8698:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 619,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 600,
															"src": "8710:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 613,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 718,
														"src": "8668:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 620,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8668:49:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 621,
												"nodeType": "ExpressionStatement",
												"src": "8668:49:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 632,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 622,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 233,
															"src": "8728:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 624,
														"indexExpression": {
															"argumentTypes": null,
															"id": 623,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 598,
															"src": "8738:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8728:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 629,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 600,
																"src": "8772:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"argumentTypes": null,
																"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
																"id": 630,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8780:36:3",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																	"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
																},
																"value": "ERC20: burn amount exceeds balance"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																	"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 625,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 233,
																	"src": "8749:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 627,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 626,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 598,
																	"src": "8759:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "8749:18:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 628,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1240,
															"src": "8749:22:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
															}
														},
														"id": 631,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8749:68:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8728:89:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 633,
												"nodeType": "ExpressionStatement",
												"src": "8728:89:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 639,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 634,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 241,
														"src": "8827:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 637,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 600,
																"src": "8859:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 635,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 241,
																"src": "8842:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 636,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1138,
															"src": "8842:16:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 638,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8842:24:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8827:39:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 640,
												"nodeType": "ExpressionStatement",
												"src": "8827:39:3"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 642,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 598,
															"src": "8890:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 645,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8907:1:3",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 644,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8899:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 643,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8899:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 646,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8899:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 647,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 600,
															"src": "8911:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 641,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 67,
														"src": "8881:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8881:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 649,
												"nodeType": "EmitStatement",
												"src": "8876:42:3"
											}
										]
									},
									"documentation": {
										"id": 596,
										"nodeType": "StructuredDocumentation",
										"src": "8201:309:3",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 651,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 598,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 651,
												"src": "8530:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 597,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8530:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 600,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 651,
												"src": "8547:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 599,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8547:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "8529:33:3"
									},
									"returnParameters": {
										"id": 602,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8580:0:3"
									},
									"scope": 719,
									"src": "8515:410:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 695,
										"nodeType": "Block",
										"src": "9431:257:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 667,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 662,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 654,
																"src": "9449:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 665,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9466:1:3",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 664,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9458:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 663,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9458:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 666,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9458:10:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "9449:19:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 668,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9470:38:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 661,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "9441:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 669,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9441:68:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 670,
												"nodeType": "ExpressionStatement",
												"src": "9441:68:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 677,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 672,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 656,
																"src": "9527:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 675,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9546:1:3",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 674,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9538:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 673,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9538:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 676,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9538:10:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "9527:21:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 678,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9550:36:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 671,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "9519:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 679,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9519:68:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 680,
												"nodeType": "ExpressionStatement",
												"src": "9519:68:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 687,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 681,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 239,
																"src": "9598:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 684,
															"indexExpression": {
																"argumentTypes": null,
																"id": 682,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 654,
																"src": "9610:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9598:18:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 685,
														"indexExpression": {
															"argumentTypes": null,
															"id": 683,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 656,
															"src": "9617:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9598:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 686,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 658,
														"src": "9628:6:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9598:36:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 688,
												"nodeType": "ExpressionStatement",
												"src": "9598:36:3"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 690,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 654,
															"src": "9658:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 691,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 656,
															"src": "9665:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 692,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 658,
															"src": "9674:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 689,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 76,
														"src": "9649:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 693,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9649:32:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 694,
												"nodeType": "EmitStatement",
												"src": "9644:37:3"
											}
										]
									},
									"documentation": {
										"id": 652,
										"nodeType": "StructuredDocumentation",
										"src": "8931:412:3",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 696,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 659,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 654,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 696,
												"src": "9366:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 653,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9366:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 656,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 696,
												"src": "9381:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 655,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9381:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 658,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 696,
												"src": "9398:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 657,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9398:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "9365:48:3"
									},
									"returnParameters": {
										"id": 660,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9431:0:3"
									},
									"scope": 719,
									"src": "9348:340:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 706,
										"nodeType": "Block",
										"src": "10069:38:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 704,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 702,
														"name": "_decimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 247,
														"src": "10079:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 703,
														"name": "decimals_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 699,
														"src": "10091:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "10079:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 705,
												"nodeType": "ExpressionStatement",
												"src": "10079:21:3"
											}
										]
									},
									"documentation": {
										"id": 697,
										"nodeType": "StructuredDocumentation",
										"src": "9694:312:3",
										"text": " @dev Sets {decimals} to a value other than the default one of 18.\n WARNING: This function should only be called from the constructor. Most\n applications that interact with token contracts will not expect\n {decimals} to ever change, and may work incorrectly if it does."
									},
									"id": 707,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setupDecimals",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 699,
												"mutability": "mutable",
												"name": "decimals_",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 707,
												"src": "10035:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 698,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "10035:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "10034:17:3"
									},
									"returnParameters": {
										"id": 701,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10069:0:3"
									},
									"scope": 719,
									"src": "10011:96:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 717,
										"nodeType": "Block",
										"src": "10783:3:3",
										"statements": []
									},
									"documentation": {
										"id": 708,
										"nodeType": "StructuredDocumentation",
										"src": "10113:576:3",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be to transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 718,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 710,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 718,
												"src": "10724:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 709,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10724:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 712,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 718,
												"src": "10738:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 711,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10738:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 718,
												"src": "10750:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 713,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10750:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "10723:42:3"
									},
									"returnParameters": {
										"id": 716,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10783:0:3"
									},
									"scope": 719,
									"src": "10694:92:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 720,
							"src": "1314:9474:3"
						}
					],
					"src": "33:10755:3"
				},
				"id": 3
			},
			"libs/ERC20Permit.sol": {
				"ast": {
					"absolutePath": "libs/ERC20Permit.sol",
					"exportedSymbols": {
						"ERC20Permit": [
							934
						]
					},
					"id": 935,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 721,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:4"
						},
						{
							"absolutePath": "libs/ERC20.sol",
							"file": "./ERC20.sol",
							"id": 722,
							"nodeType": "ImportDirective",
							"scope": 935,
							"sourceUnit": 720,
							"src": "151:21:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "libs/ECDSA.sol",
							"file": "./ECDSA.sol",
							"id": 723,
							"nodeType": "ImportDirective",
							"scope": 935,
							"sourceUnit": 217,
							"src": "173:21:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 725,
										"name": "ERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 719,
										"src": "558:5:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ERC20_$719",
											"typeString": "contract ERC20"
										}
									},
									"id": 726,
									"nodeType": "InheritanceSpecifier",
									"src": "558:5:4"
								}
							],
							"contractDependencies": [
								77,
								100,
								719
							],
							"contractKind": "contract",
							"documentation": {
								"id": 724,
								"nodeType": "StructuredDocumentation",
								"src": "196:328:4",
								"text": " @dev Extension of {ERC20} that allows token holders to use their tokens\n without sending any transactions by setting {IERC20-allowance} with a\n signature using the {permit} method, and then spend them via\n {IERC20-transferFrom}.\n The {permit} signature mechanism conforms to the {IERC2612Permit} interface."
							},
							"fullyImplemented": false,
							"id": 934,
							"linearizedBaseContracts": [
								934,
								719,
								77,
								100
							],
							"name": "ERC20Permit",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 730,
									"mutability": "mutable",
									"name": "_nonces",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 934,
									"src": "568:43:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 729,
										"keyType": {
											"id": 727,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "576:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "568:27:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 728,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "587:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 735,
									"mutability": "constant",
									"name": "_PERMIT_TYPEHASH",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 934,
									"src": "616:147:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 731,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "616:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"argumentTypes": null,
										"arguments": [
											{
												"argumentTypes": null,
												"hexValue": "5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529",
												"id": 733,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "675:84:4",
												"subdenomination": null,
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												},
												"value": "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												}
											],
											"id": 732,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": -8,
											"src": "660:9:4",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 734,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "660:103:4",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 739,
									"mutability": "mutable",
									"name": "_domainSeparators",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 934,
									"src": "965:53:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_bytes32_$",
										"typeString": "mapping(uint256 => bytes32)"
									},
									"typeName": {
										"id": 738,
										"keyType": {
											"id": 736,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "973:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "965:27:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_bytes32_$",
											"typeString": "mapping(uint256 => bytes32)"
										},
										"valueType": {
											"id": 737,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "984:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 745,
										"nodeType": "Block",
										"src": "1046:35:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 742,
														"name": "_updateDomainSeparator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 893,
														"src": "1052:22:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$_t_bytes32_$",
															"typeString": "function () returns (bytes32)"
														}
													},
													"id": 743,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1052:24:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 744,
												"nodeType": "ExpressionStatement",
												"src": "1052:24:4"
											}
										]
									},
									"documentation": null,
									"id": 746,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 740,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1034:2:4"
									},
									"returnParameters": {
										"id": 741,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1046:0:4"
									},
									"scope": 934,
									"src": "1023:58:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 831,
										"nodeType": "Block",
										"src": "1428:472:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 768,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 765,
																	"name": "blockTimestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 933,
																	"src": "1442:14:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 766,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1442:16:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 767,
																"name": "deadline",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 755,
																"src": "1462:8:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1442:28:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "45524332305065726d69743a206578706972656420646561646c696e65",
															"id": 769,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1472:31:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd",
																"typeString": "literal_string \"ERC20Permit: expired deadline\""
															},
															"value": "ERC20Permit: expired deadline"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd",
																"typeString": "literal_string \"ERC20Permit: expired deadline\""
															}
														],
														"id": 764,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1434:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 770,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1434:70:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 771,
												"nodeType": "ExpressionStatement",
												"src": "1434:70:4"
											},
											{
												"assignments": [
													773
												],
												"declarations": [
													{
														"constant": false,
														"id": 773,
														"mutability": "mutable",
														"name": "hashStruct",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 831,
														"src": "1511:18:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 772,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1511:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 787,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 777,
																	"name": "_PERMIT_TYPEHASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 735,
																	"src": "1553:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 778,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 749,
																	"src": "1571:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 779,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 751,
																	"src": "1578:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 780,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 753,
																	"src": "1587:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 781,
																		"name": "_nonces",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 730,
																		"src": "1595:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 783,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 782,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 749,
																		"src": "1603:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1595:14:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 784,
																	"name": "deadline",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 755,
																	"src": "1611:8:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 775,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "1542:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 776,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "1542:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 785,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1542:78:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 774,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -8,
														"src": "1532:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 786,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1532:89:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1511:110:4"
											},
											{
												"assignments": [
													789
												],
												"declarations": [
													{
														"constant": false,
														"id": 789,
														"mutability": "mutable",
														"name": "hash",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 831,
														"src": "1628:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 788,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1628:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 802,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"hexValue": "307831393031",
																			"id": 795,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1677:6:4",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_6401_by_1",
																				"typeString": "int_const 6401"
																			},
																			"value": "0x1901"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_6401_by_1",
																				"typeString": "int_const 6401"
																			}
																		],
																		"id": 794,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1670:6:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint16_$",
																			"typeString": "type(uint16)"
																		},
																		"typeName": {
																			"id": 793,
																			"name": "uint16",
																			"nodeType": "ElementaryTypeName",
																			"src": "1670:6:4",
																			"typeDescriptions": {
																				"typeIdentifier": null,
																				"typeString": null
																			}
																		}
																	},
																	"id": 796,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1670:14:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint16",
																		"typeString": "uint16"
																	}
																},
																{
																	"argumentTypes": null,
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 797,
																		"name": "_domainSeparator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 917,
																		"src": "1686:16:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$__$returns$_t_bytes32_$",
																			"typeString": "function () returns (bytes32)"
																		}
																	},
																	"id": 798,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1686:18:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 799,
																	"name": "hashStruct",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 773,
																	"src": "1706:10:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint16",
																		"typeString": "uint16"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 791,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "1653:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 792,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "1653:16:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 800,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1653:64:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 790,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -8,
														"src": "1643:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 801,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1643:75:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1628:90:4"
											},
											{
												"assignments": [
													804
												],
												"declarations": [
													{
														"constant": false,
														"id": 804,
														"mutability": "mutable",
														"name": "signer",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 831,
														"src": "1725:14:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 803,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1725:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 812,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 807,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 789,
															"src": "1756:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"argumentTypes": null,
															"id": 808,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 757,
															"src": "1762:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"argumentTypes": null,
															"id": 809,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "1765:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"argumentTypes": null,
															"id": 810,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 761,
															"src": "1768:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 805,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 216,
															"src": "1742:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$216_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 806,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "recover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 198,
														"src": "1742:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 811,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1742:28:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1725:45:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 816,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 814,
																"name": "signer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 804,
																"src": "1784:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 815,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 749,
																"src": "1794:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1784:15:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "45524332305065726d69743a20696e76616c6964207369676e6174757265",
															"id": 817,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1801:32:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124",
																"typeString": "literal_string \"ERC20Permit: invalid signature\""
															},
															"value": "ERC20Permit: invalid signature"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124",
																"typeString": "literal_string \"ERC20Permit: invalid signature\""
															}
														],
														"id": 813,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1776:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 818,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1776:58:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 819,
												"nodeType": "ExpressionStatement",
												"src": "1776:58:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 823,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "++",
													"prefix": false,
													"src": "1841:16:4",
													"subExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 820,
															"name": "_nonces",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 730,
															"src": "1841:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 822,
														"indexExpression": {
															"argumentTypes": null,
															"id": 821,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 749,
															"src": "1849:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1841:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 824,
												"nodeType": "ExpressionStatement",
												"src": "1841:16:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 826,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 749,
															"src": "1872:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 827,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 751,
															"src": "1879:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 828,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 753,
															"src": "1888:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 825,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 696,
														"src": "1863:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 829,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1863:32:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 830,
												"nodeType": "ExpressionStatement",
												"src": "1863:32:4"
											}
										]
									},
									"documentation": {
										"id": 747,
										"nodeType": "StructuredDocumentation",
										"src": "1085:188:4",
										"text": " @dev See {IERC2612Permit-permit}.\n If https://eips.ethereum.org/EIPS/eip-1344[ChainID] ever changes, the\n EIP712 Domain Separator is automatically recalculated."
									},
									"functionSelector": "d505accf",
									"id": 832,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 762,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 749,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 832,
												"src": "1297:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 748,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1297:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 751,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 832,
												"src": "1316:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 750,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1316:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 753,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 832,
												"src": "1337:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 752,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1337:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 755,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 832,
												"src": "1357:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 754,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1357:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 757,
												"mutability": "mutable",
												"name": "v",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 832,
												"src": "1379:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 756,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1379:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 759,
												"mutability": "mutable",
												"name": "r",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 832,
												"src": "1392:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 758,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1392:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 761,
												"mutability": "mutable",
												"name": "s",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 832,
												"src": "1407:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 760,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1407:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1291:129:4"
									},
									"returnParameters": {
										"id": 763,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1428:0:4"
									},
									"scope": 934,
									"src": "1276:624:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 844,
										"nodeType": "Block",
										"src": "2016:32:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 840,
														"name": "_nonces",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 730,
														"src": "2029:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 842,
													"indexExpression": {
														"argumentTypes": null,
														"id": 841,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 835,
														"src": "2037:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2029:14:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 839,
												"id": 843,
												"nodeType": "Return",
												"src": "2022:21:4"
											}
										]
									},
									"documentation": {
										"id": 833,
										"nodeType": "StructuredDocumentation",
										"src": "1904:48:4",
										"text": " @dev See {IERC2612Permit-nonces}."
									},
									"functionSelector": "7ecebe00",
									"id": 845,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 836,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 835,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 845,
												"src": "1971:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 834,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1971:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1970:15:4"
									},
									"returnParameters": {
										"id": 839,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 838,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 845,
												"src": "2007:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 837,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2007:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2006:9:4"
									},
									"scope": 934,
									"src": "1955:93:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 892,
										"nodeType": "Block",
										"src": "2112:425:4",
										"statements": [
											{
												"assignments": [
													851
												],
												"declarations": [
													{
														"constant": false,
														"id": 851,
														"mutability": "mutable",
														"name": "_chainID",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 892,
														"src": "2118:16:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 850,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2118:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 854,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 852,
														"name": "chainID",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 924,
														"src": "2137:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 853,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2137:9:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2118:28:4"
											},
											{
												"assignments": [
													856
												],
												"declarations": [
													{
														"constant": false,
														"id": 856,
														"mutability": "mutable",
														"name": "newDomainSeparator",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 892,
														"src": "2153:26:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 855,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2153:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 883,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
																			"id": 861,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2229:84:4",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
																				"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
																			},
																			"value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
																				"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
																			}
																		],
																		"id": 860,
																		"name": "keccak256",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -8,
																		"src": "2219:9:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																			"typeString": "function (bytes memory) pure returns (bytes32)"
																		}
																	},
																	"id": 862,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2219:95:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"arguments": [],
																					"expression": {
																						"argumentTypes": [],
																						"id": 866,
																						"name": "name",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 277,
																						"src": "2340:4:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
																							"typeString": "function () view returns (string memory)"
																						}
																					},
																					"id": 867,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "2340:6:4",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 865,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "2334:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																					"typeString": "type(bytes storage pointer)"
																				},
																				"typeName": {
																					"id": 864,
																					"name": "bytes",
																					"nodeType": "ElementaryTypeName",
																					"src": "2334:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": null,
																						"typeString": null
																					}
																				}
																			},
																			"id": 868,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2334:13:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		],
																		"id": 863,
																		"name": "keccak256",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -8,
																		"src": "2324:9:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																			"typeString": "function (bytes memory) pure returns (bytes32)"
																		}
																	},
																	"id": 869,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2324:24:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"hexValue": "31",
																					"id": 873,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "2374:3:4",
																					"subdenomination": null,
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
																						"typeString": "literal_string \"1\""
																					},
																					"value": "1"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
																						"typeString": "literal_string \"1\""
																					}
																				],
																				"id": 872,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "2368:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																					"typeString": "type(bytes storage pointer)"
																				},
																				"typeName": {
																					"id": 871,
																					"name": "bytes",
																					"nodeType": "ElementaryTypeName",
																					"src": "2368:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": null,
																						"typeString": null
																					}
																				}
																			},
																			"id": 874,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2368:10:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		],
																		"id": 870,
																		"name": "keccak256",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -8,
																		"src": "2358:9:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																			"typeString": "function (bytes memory) pure returns (bytes32)"
																		}
																	},
																	"id": 875,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2358:21:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 876,
																	"name": "_chainID",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 851,
																	"src": "2400:8:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 879,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "2426:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_ERC20Permit_$934",
																				"typeString": "contract ERC20Permit"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_ERC20Permit_$934",
																				"typeString": "contract ERC20Permit"
																			}
																		],
																		"id": 878,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2418:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 877,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2418:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": null,
																				"typeString": null
																			}
																		}
																	},
																	"id": 880,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2418:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 858,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "2199:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 859,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "2199:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 881,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2199:240:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 857,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -8,
														"src": "2182:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 882,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2182:263:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2153:292:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 888,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 884,
															"name": "_domainSeparators",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 739,
															"src": "2452:17:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bytes32_$",
																"typeString": "mapping(uint256 => bytes32)"
															}
														},
														"id": 886,
														"indexExpression": {
															"argumentTypes": null,
															"id": 885,
															"name": "_chainID",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 851,
															"src": "2470:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2452:27:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 887,
														"name": "newDomainSeparator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 856,
														"src": "2482:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2452:48:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 889,
												"nodeType": "ExpressionStatement",
												"src": "2452:48:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 890,
													"name": "newDomainSeparator",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 856,
													"src": "2514:18:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 849,
												"id": 891,
												"nodeType": "Return",
												"src": "2507:25:4"
											}
										]
									},
									"documentation": null,
									"id": 893,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_updateDomainSeparator",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 846,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2083:2:4"
									},
									"returnParameters": {
										"id": 849,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 848,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 893,
												"src": "2103:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 847,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2103:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2102:9:4"
									},
									"scope": 934,
									"src": "2052:485:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 916,
										"nodeType": "Block",
										"src": "2661:188:4",
										"statements": [
											{
												"assignments": [
													899
												],
												"declarations": [
													{
														"constant": false,
														"id": 899,
														"mutability": "mutable",
														"name": "domainSeparator",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 916,
														"src": "2667:23:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 898,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2667:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 904,
												"initialValue": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 900,
														"name": "_domainSeparators",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 739,
														"src": "2693:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_bytes32_$",
															"typeString": "mapping(uint256 => bytes32)"
														}
													},
													"id": 903,
													"indexExpression": {
														"argumentTypes": null,
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 901,
															"name": "chainID",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 924,
															"src": "2711:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																"typeString": "function () view returns (uint256)"
															}
														},
														"id": 902,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2711:9:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2693:28:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2667:54:4"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 907,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 905,
														"name": "domainSeparator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 899,
														"src": "2731:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30783030",
														"id": 906,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2750:4:4",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0x00"
													},
													"src": "2731:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 914,
													"nodeType": "Block",
													"src": "2799:46:4",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 911,
																	"name": "_updateDomainSeparator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 893,
																	"src": "2814:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$__$returns$_t_bytes32_$",
																		"typeString": "function () returns (bytes32)"
																	}
																},
																"id": 912,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2814:24:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 897,
															"id": 913,
															"nodeType": "Return",
															"src": "2807:31:4"
														}
													]
												},
												"id": 915,
												"nodeType": "IfStatement",
												"src": "2727:118:4",
												"trueBody": {
													"id": 910,
													"nodeType": "Block",
													"src": "2756:37:4",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 908,
																"name": "domainSeparator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 899,
																"src": "2771:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 897,
															"id": 909,
															"nodeType": "Return",
															"src": "2764:22:4"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"id": 917,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_domainSeparator",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 894,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2632:2:4"
									},
									"returnParameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 896,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 917,
												"src": "2652:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 895,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2651:9:4"
									},
									"scope": 934,
									"src": "2607:242:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 923,
										"nodeType": "Block",
										"src": "2919:54:4",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2934:35:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2942:21:4",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "chainid",
																	"nodeType": "YulIdentifier",
																	"src": "2954:7:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2954:9:4"
															},
															"variableNames": [
																{
																	"name": "_chainID",
																	"nodeType": "YulIdentifier",
																	"src": "2942:8:4"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 920,
														"isOffset": false,
														"isSlot": false,
														"src": "2942:8:4",
														"valueSize": 1
													}
												],
												"id": 922,
												"nodeType": "InlineAssembly",
												"src": "2925:44:4"
											}
										]
									},
									"documentation": null,
									"functionSelector": "adc879e9",
									"id": 924,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "chainID",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 918,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2869:2:4"
									},
									"returnParameters": {
										"id": 921,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 920,
												"mutability": "mutable",
												"name": "_chainID",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 924,
												"src": "2901:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 919,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2901:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2900:18:4"
									},
									"scope": 934,
									"src": "2853:120:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 932,
										"nodeType": "Block",
										"src": "3041:33:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 929,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -4,
														"src": "3054:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 930,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "3054:15:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 928,
												"id": 931,
												"nodeType": "Return",
												"src": "3047:22:4"
											}
										]
									},
									"documentation": null,
									"functionSelector": "adb61832",
									"id": 933,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "blockTimestamp",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 925,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3000:2:4"
									},
									"returnParameters": {
										"id": 928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 933,
												"src": "3032:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 926,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3032:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3031:9:4"
									},
									"scope": 934,
									"src": "2977:97:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 935,
							"src": "525:2551:4"
						}
					],
					"src": "33:3043:4"
				},
				"id": 4
			},
			"libs/SafeMath.sol": {
				"ast": {
					"absolutePath": "libs/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							1289
						]
					},
					"id": 1290,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 936,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 937,
								"nodeType": "StructuredDocumentation",
								"src": "66:563:5",
								"text": " @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."
							},
							"fullyImplemented": true,
							"id": 1289,
							"linearizedBaseContracts": [
								1289
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 967,
										"nodeType": "Block",
										"src": "865:98:5",
										"statements": [
											{
												"assignments": [
													950
												],
												"declarations": [
													{
														"constant": false,
														"id": 950,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 967,
														"src": "875:9:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 949,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "875:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 954,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 953,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 951,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 940,
														"src": "887:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 952,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 942,
														"src": "891:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "887:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "875:17:5"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 957,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 955,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 950,
														"src": "906:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"argumentTypes": null,
														"id": 956,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 940,
														"src": "910:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "906:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 962,
												"nodeType": "IfStatement",
												"src": "902:28:5",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 958,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "921:5:5",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 959,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "928:1:5",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 960,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "920:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 948,
													"id": 961,
													"nodeType": "Return",
													"src": "913:17:5"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 963,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "948:4:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"id": 964,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 950,
															"src": "954:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 965,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "947:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 948,
												"id": 966,
												"nodeType": "Return",
												"src": "940:16:5"
											}
										]
									},
									"documentation": {
										"id": 938,
										"nodeType": "StructuredDocumentation",
										"src": "653:131:5",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 968,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 940,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 968,
												"src": "805:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 939,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "805:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 968,
												"src": "816:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 941,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "804:22:5"
									},
									"returnParameters": {
										"id": 948,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 945,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 968,
												"src": "850:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 944,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "850:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 947,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 968,
												"src": "856:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 946,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "856:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "849:15:5"
									},
									"scope": 1289,
									"src": "789:174:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 994,
										"nodeType": "Block",
										"src": "1185:75:5",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 982,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 980,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 973,
														"src": "1199:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"id": 981,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 971,
														"src": "1203:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1199:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 987,
												"nodeType": "IfStatement",
												"src": "1195:28:5",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 983,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1214:5:5",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 984,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1221:1:5",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 985,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1213:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 979,
													"id": 986,
													"nodeType": "Return",
													"src": "1206:17:5"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 988,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1241:4:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 991,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 989,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 971,
																"src": "1247:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"argumentTypes": null,
																"id": 990,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 973,
																"src": "1251:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1247:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 992,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1240:13:5",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 979,
												"id": 993,
												"nodeType": "Return",
												"src": "1233:20:5"
											}
										]
									},
									"documentation": {
										"id": 969,
										"nodeType": "StructuredDocumentation",
										"src": "969:135:5",
										"text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 995,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 974,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 971,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 995,
												"src": "1125:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 970,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1125:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 973,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 995,
												"src": "1136:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 972,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1136:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1124:22:5"
									},
									"returnParameters": {
										"id": 979,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 976,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 995,
												"src": "1170:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 975,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1170:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 978,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 995,
												"src": "1176:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 977,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1176:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1169:15:5"
									},
									"scope": 1289,
									"src": "1109:151:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1035,
										"nodeType": "Block",
										"src": "1484:359:5",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1009,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 1007,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 998,
														"src": "1716:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 1008,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1721:1:5",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1716:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 1014,
												"nodeType": "IfStatement",
												"src": "1712:28:5",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "74727565",
																"id": 1010,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1732:4:5",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 1011,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1738:1:5",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 1012,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1731:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 1006,
													"id": 1013,
													"nodeType": "Return",
													"src": "1724:16:5"
												}
											},
											{
												"assignments": [
													1016
												],
												"declarations": [
													{
														"constant": false,
														"id": 1016,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1035,
														"src": "1750:9:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1015,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1750:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1020,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1019,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 1017,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 998,
														"src": "1762:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 1018,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1000,
														"src": "1766:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1762:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1750:17:5"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1025,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1023,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 1021,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1016,
															"src": "1781:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"argumentTypes": null,
															"id": 1022,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 998,
															"src": "1785:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1781:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"argumentTypes": null,
														"id": 1024,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1000,
														"src": "1790:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1781:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 1030,
												"nodeType": "IfStatement",
												"src": "1777:33:5",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 1026,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1801:5:5",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 1027,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1808:1:5",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 1028,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1800:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 1006,
													"id": 1029,
													"nodeType": "Return",
													"src": "1793:17:5"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 1031,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1828:4:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"id": 1032,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1016,
															"src": "1834:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1033,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1827:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 1006,
												"id": 1034,
												"nodeType": "Return",
												"src": "1820:16:5"
											}
										]
									},
									"documentation": {
										"id": 996,
										"nodeType": "StructuredDocumentation",
										"src": "1266:137:5",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1036,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1001,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 998,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1036,
												"src": "1424:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 997,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1424:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1000,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1036,
												"src": "1435:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 999,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1435:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1423:22:5"
									},
									"returnParameters": {
										"id": 1006,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1003,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1036,
												"src": "1469:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1002,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1469:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1005,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1036,
												"src": "1475:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1004,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1475:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1468:15:5"
									},
									"scope": 1289,
									"src": "1408:435:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1062,
										"nodeType": "Block",
										"src": "2068:76:5",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1050,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 1048,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1041,
														"src": "2082:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 1049,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2087:1:5",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2082:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 1055,
												"nodeType": "IfStatement",
												"src": "2078:29:5",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 1051,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2098:5:5",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 1052,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2105:1:5",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 1053,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2097:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 1047,
													"id": 1054,
													"nodeType": "Return",
													"src": "2090:17:5"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 1056,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2125:4:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1059,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 1057,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1039,
																"src": "2131:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"argumentTypes": null,
																"id": 1058,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1041,
																"src": "2135:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2131:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1060,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2124:13:5",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 1047,
												"id": 1061,
												"nodeType": "Return",
												"src": "2117:20:5"
											}
										]
									},
									"documentation": {
										"id": 1037,
										"nodeType": "StructuredDocumentation",
										"src": "1849:138:5",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 1063,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1042,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1039,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1063,
												"src": "2008:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1038,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2008:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1041,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1063,
												"src": "2019:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1040,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2019:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2007:22:5"
									},
									"returnParameters": {
										"id": 1047,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1044,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1063,
												"src": "2053:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1043,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2053:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1046,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1063,
												"src": "2059:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1045,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2059:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2052:15:5"
									},
									"scope": 1289,
									"src": "1992:152:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1089,
										"nodeType": "Block",
										"src": "2379:76:5",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1077,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 1075,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1068,
														"src": "2393:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 1076,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2398:1:5",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2393:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 1082,
												"nodeType": "IfStatement",
												"src": "2389:29:5",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 1078,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2409:5:5",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 1079,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2416:1:5",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 1080,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2408:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 1074,
													"id": 1081,
													"nodeType": "Return",
													"src": "2401:17:5"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 1083,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2436:4:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1086,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 1084,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1066,
																"src": "2442:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"argumentTypes": null,
																"id": 1085,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1068,
																"src": "2446:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2442:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1087,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2435:13:5",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 1074,
												"id": 1088,
												"nodeType": "Return",
												"src": "2428:20:5"
											}
										]
									},
									"documentation": {
										"id": 1064,
										"nodeType": "StructuredDocumentation",
										"src": "2150:148:5",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 1090,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1069,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1066,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1090,
												"src": "2319:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1065,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2319:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1068,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1090,
												"src": "2330:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1067,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2330:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2318:22:5"
									},
									"returnParameters": {
										"id": 1074,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1071,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1090,
												"src": "2364:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1070,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2364:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1073,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1090,
												"src": "2370:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1072,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2370:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2363:15:5"
									},
									"scope": 1289,
									"src": "2303:152:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1115,
										"nodeType": "Block",
										"src": "2757:108:5",
										"statements": [
											{
												"assignments": [
													1101
												],
												"declarations": [
													{
														"constant": false,
														"id": 1101,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1115,
														"src": "2767:9:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1100,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2767:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1105,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1104,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 1102,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1093,
														"src": "2779:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 1103,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1095,
														"src": "2783:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2779:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2767:17:5"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1109,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 1107,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1101,
																"src": "2802:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 1108,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1093,
																"src": "2807:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2802:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 1110,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2810:29:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 1106,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2794:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2794:46:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1112,
												"nodeType": "ExpressionStatement",
												"src": "2794:46:5"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 1113,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1101,
													"src": "2857:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1099,
												"id": 1114,
												"nodeType": "Return",
												"src": "2850:8:5"
											}
										]
									},
									"documentation": {
										"id": 1091,
										"nodeType": "StructuredDocumentation",
										"src": "2461:224:5",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 1116,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1093,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1116,
												"src": "2703:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1092,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2703:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1116,
												"src": "2714:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1094,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2714:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2702:22:5"
									},
									"returnParameters": {
										"id": 1099,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1098,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1116,
												"src": "2748:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1097,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2748:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2747:9:5"
									},
									"scope": 1289,
									"src": "2690:175:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1137,
										"nodeType": "Block",
										"src": "3203:88:5",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1129,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 1127,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1121,
																"src": "3221:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 1128,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1119,
																"src": "3226:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3221:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 1130,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3229:32:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 1126,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "3213:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3213:49:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1132,
												"nodeType": "ExpressionStatement",
												"src": "3213:49:5"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 1133,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1119,
														"src": "3279:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 1134,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1121,
														"src": "3283:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3279:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1125,
												"id": 1136,
												"nodeType": "Return",
												"src": "3272:12:5"
											}
										]
									},
									"documentation": {
										"id": 1117,
										"nodeType": "StructuredDocumentation",
										"src": "2871:260:5",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 1138,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1119,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1138,
												"src": "3149:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3149:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1121,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1138,
												"src": "3160:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1120,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3160:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3148:22:5"
									},
									"returnParameters": {
										"id": 1125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1124,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1138,
												"src": "3194:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1123,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3194:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3193:9:5"
									},
									"scope": 1289,
									"src": "3136:155:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1171,
										"nodeType": "Block",
										"src": "3605:148:5",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 1148,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1141,
														"src": "3619:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 1149,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3624:1:5",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3619:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 1153,
												"nodeType": "IfStatement",
												"src": "3615:20:5",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 1151,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3634:1:5",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"functionReturnParameters": 1147,
													"id": 1152,
													"nodeType": "Return",
													"src": "3627:8:5"
												}
											},
											{
												"assignments": [
													1155
												],
												"declarations": [
													{
														"constant": false,
														"id": 1155,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1171,
														"src": "3645:9:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1154,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3645:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1159,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1158,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 1156,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1141,
														"src": "3657:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 1157,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1143,
														"src": "3661:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3657:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3645:17:5"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1165,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1163,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 1161,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1155,
																	"src": "3680:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 1162,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1141,
																	"src": "3684:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3680:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 1164,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1143,
																"src": "3689:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3680:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 1166,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3692:35:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 1160,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "3672:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1167,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3672:56:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1168,
												"nodeType": "ExpressionStatement",
												"src": "3672:56:5"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 1169,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1155,
													"src": "3745:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1147,
												"id": 1170,
												"nodeType": "Return",
												"src": "3738:8:5"
											}
										]
									},
									"documentation": {
										"id": 1139,
										"nodeType": "StructuredDocumentation",
										"src": "3297:236:5",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 1172,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1144,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1141,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1172,
												"src": "3551:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1140,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3551:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1143,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1172,
												"src": "3562:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1142,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3562:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3550:22:5"
									},
									"returnParameters": {
										"id": 1147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1146,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1172,
												"src": "3596:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3596:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3595:9:5"
									},
									"scope": 1289,
									"src": "3538:215:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1193,
										"nodeType": "Block",
										"src": "4284:83:5",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1185,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 1183,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1177,
																"src": "4302:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 1184,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4306:1:5",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4302:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 1186,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4309:28:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 1182,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4294:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4294:44:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1188,
												"nodeType": "ExpressionStatement",
												"src": "4294:44:5"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1191,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 1189,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1175,
														"src": "4355:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 1190,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1177,
														"src": "4359:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4355:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1181,
												"id": 1192,
												"nodeType": "Return",
												"src": "4348:12:5"
											}
										]
									},
									"documentation": {
										"id": 1173,
										"nodeType": "StructuredDocumentation",
										"src": "3759:453:5",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1194,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1175,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1194,
												"src": "4230:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1174,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4230:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1177,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1194,
												"src": "4241:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1176,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4241:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4229:22:5"
									},
									"returnParameters": {
										"id": 1181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1180,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1194,
												"src": "4275:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1179,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4275:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4274:9:5"
									},
									"scope": 1289,
									"src": "4217:150:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1215,
										"nodeType": "Block",
										"src": "4887:81:5",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1207,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 1205,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1199,
																"src": "4905:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 1206,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4909:1:5",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4905:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 1208,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4912:26:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 1204,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4897:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1209,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4897:42:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1210,
												"nodeType": "ExpressionStatement",
												"src": "4897:42:5"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1213,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 1211,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1197,
														"src": "4956:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 1212,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1199,
														"src": "4960:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4956:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1203,
												"id": 1214,
												"nodeType": "Return",
												"src": "4949:12:5"
											}
										]
									},
									"documentation": {
										"id": 1195,
										"nodeType": "StructuredDocumentation",
										"src": "4373:442:5",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1216,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1197,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1216,
												"src": "4833:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1196,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4833:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1199,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1216,
												"src": "4844:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1198,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4844:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4832:22:5"
									},
									"returnParameters": {
										"id": 1203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1202,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1216,
												"src": "4878:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1201,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4878:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4877:9:5"
									},
									"scope": 1289,
									"src": "4820:148:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1239,
										"nodeType": "Block",
										"src": "5527:68:5",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1231,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 1229,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1221,
																"src": "5545:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 1230,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1219,
																"src": "5550:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5545:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 1232,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1223,
															"src": "5553:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1228,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5537:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1233,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5537:29:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1234,
												"nodeType": "ExpressionStatement",
												"src": "5537:29:5"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1237,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 1235,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1219,
														"src": "5583:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 1236,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1221,
														"src": "5587:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5583:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1227,
												"id": 1238,
												"nodeType": "Return",
												"src": "5576:12:5"
											}
										]
									},
									"documentation": {
										"id": 1217,
										"nodeType": "StructuredDocumentation",
										"src": "4974:453:5",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 1240,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1219,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1240,
												"src": "5445:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5445:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1221,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1240,
												"src": "5456:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1220,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5456:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1223,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1240,
												"src": "5467:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1222,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5467:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5444:50:5"
									},
									"returnParameters": {
										"id": 1227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1226,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1240,
												"src": "5518:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1225,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5518:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5517:9:5"
									},
									"scope": 1289,
									"src": "5432:163:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1263,
										"nodeType": "Block",
										"src": "6347:67:5",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1255,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 1253,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1245,
																"src": "6365:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 1254,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6369:1:5",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6365:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 1256,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1247,
															"src": "6372:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1252,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "6357:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1257,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6357:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1258,
												"nodeType": "ExpressionStatement",
												"src": "6357:28:5"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1261,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 1259,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1243,
														"src": "6402:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 1260,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1245,
														"src": "6406:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6402:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1251,
												"id": 1262,
												"nodeType": "Return",
												"src": "6395:12:5"
											}
										]
									},
									"documentation": {
										"id": 1241,
										"nodeType": "StructuredDocumentation",
										"src": "5601:646:5",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryDiv}.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1264,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1243,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1264,
												"src": "6265:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6265:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1245,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1264,
												"src": "6276:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6276:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1247,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1264,
												"src": "6287:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1246,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6287:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6264:50:5"
									},
									"returnParameters": {
										"id": 1251,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1250,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1264,
												"src": "6338:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1249,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6338:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6337:9:5"
									},
									"scope": 1289,
									"src": "6252:162:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1287,
										"nodeType": "Block",
										"src": "7155:67:5",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1279,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 1277,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1269,
																"src": "7173:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 1278,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7177:1:5",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7173:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 1280,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1271,
															"src": "7180:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1276,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "7165:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1281,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7165:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1282,
												"nodeType": "ExpressionStatement",
												"src": "7165:28:5"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1285,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 1283,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1267,
														"src": "7210:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 1284,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1269,
														"src": "7214:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7210:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1275,
												"id": 1286,
												"nodeType": "Return",
												"src": "7203:12:5"
											}
										]
									},
									"documentation": {
										"id": 1265,
										"nodeType": "StructuredDocumentation",
										"src": "6420:635:5",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1288,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1267,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1288,
												"src": "7073:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1266,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7073:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1269,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1288,
												"src": "7084:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1268,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7084:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1271,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1288,
												"src": "7095:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1270,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7095:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7072:50:5"
									},
									"returnParameters": {
										"id": 1275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1274,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1288,
												"src": "7146:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1273,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7146:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7145:9:5"
									},
									"scope": 1289,
									"src": "7060:162:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1290,
							"src": "630:6594:5"
						}
					],
					"src": "33:7191:5"
				},
				"id": 5
			}
		}
	}
}